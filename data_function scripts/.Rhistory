print("hello")
setwd("~/Documents/GitHub/film_networks/data_function scripts")
library(tidyverse)
library(quanteda) #for text cleaning
library(igraph) #for creating graphs
library(visNetwork) #for visualizing graphs
library(wordcloud) #for creating wordclouds
#load_functions
source("calculatecoocstats.R") #calculate co-occurrence statistics
source("grapher.R") #create graph
#Wiedemann, Gregor; Niekler, Andreas (2017): Hands-on: A five day text mining course for humanists and social scientists in R. Proceedings of the 1st Workshop on Teaching NLP for Digital Humanities (Teach4DH@GSCL 2017), Berlin.
source("rawcounts.R") #find raw counts of co-occurrences
source("token_filter.R") #filter tokens
#load tokens, get it ready for analysis
load("token.all.RData")
#convert tokens to all lower
token.all <- tokens_tolower(token.all) #convert all tokens to lower
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 25, token_filter2("all", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:20,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
#community structure
#male
graphm = graph.m[[1]] #store graph object
vism <- toVisNetworkData(graphm) #create visnetwork object
nodes <- vism$nodes #store nodes
nodes <- nodes %>% select(-color) #remove color nodes
edges <- vism$edges #store edges
graphm = simplify(graphm, remove.loops = TRUE) #remove loops
vism_comm <- cluster_fast_greedy(graphm) #find clusters using igraph
modularity(vism_comm) #modularity
plot(vism_comm, graphm, vertex.size = 4, vertex.label = NA)
length(vis_comm)
length(vism_comm)
source("grapher.R") #create graph
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 25, token_filter2("all", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:20,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
#network
visIgraph(graph.m[[1]]) %>% visNodes(font = list(size = 28))
#community structure
#male
graphm = graph.m[[1]] #store graph object
vism <- toVisNetworkData(graphm) #create visnetwork object
nodes <- vism$nodes #store nodes
nodes <- nodes %>% select(-color) #remove color nodes
edges <- vism$edges #store edges
graphm = simplify(graphm, remove.loops = TRUE) #remove loops
vism_comm <- cluster_fast_greedy(graphm) #find clusters using igraph
modularity(vism_comm) #modularity
length(vism_comm)
plot(vism_comm, graphm, vertex.size = 4, vertex.label = NA)
nodes$group <- membership(vism_comm) #store group info
#no physics
vism_graph <- visNetwork(nodes, edges, width = 1600, height = 900) %>% visPhysics(enabled = FALSE) %>%
visNodes(size = 8, font = c(size = 8)) %>% visEdges(color = c(opacity = 0.4))
vism_graph
visSave(vism_graph, "male_graph.html", selfcontained = TRUE, background = "white")
degree(graphm)
#female
female.perm <- data.frame()
graph.f = grapher("female/characters", 25, token_filter2("all", 1940, 2010, token.all))
gr.f <- graph.f[[3]]
gr.f <- gr.f[gr.f$names != "male/characters",]
gr.f <- gr.f[1:20,]
gr.f$rank = 1 : nrow(gr.f)
gr.f$gender = "female"
#community structure
graphf = graph.f[[1]] #store graph object
visf <- toVisNetworkData(graphf) #create visnetwork object
nodes <- visf$nodes #store nodes
nodes <- nodes %>% select(-color) #remove color nodes
edges <- visf$edges #store edges
graphf = simplify(graphf, remove.loops = TRUE) #remove loops
visf_comm <- cluster_fast_greedy(graphf) #find clusters using igraph
modularity(visf_comm) #modularity
visf_comm
nodes$group <- membership(visf_comm) #store group info
#no physics
visf_graph <- visNetwork(nodes, edges, width = 1600, height = 900) %>% visPhysics(enabled = FALSE) %>%
visNodes(size = 8, font = c(size = 8)) %>% visEdges(color = c(opacity = 0.4))
visf_graph
visSave(visf_graph, "female_graph.html", selfcontained = TRUE, background = "white")
length(visf_comm)
length(vism_comm)
vism_comm <- walktrap.community(graphm) #find clusters using igraph
modularity(vism_comm) #modularity
#vism_comm
length(vism_comm)
plot(vism_comm, graphm, vertex.size = 4, vertex.label = NA)
vism_comm
degree(graphm)['tells/verb']
degree(graphm)['arrives/verb']
degree(graphm)['help/noun']
graphm[[2]]
vism_comm[[2]]
vism_comm[[3]]
vism_comm[[4]]
vism_comm[[5]]
vism_comm[[6]]
vism_comm[[7]]
graph.m = grapher("male/characters", 50, token_filter2("all", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:20,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
#community structure
#male
graphm = graph.m[[1]] #store graph object
vism <- toVisNetworkData(graphm) #create visnetwork object
nodes <- vism$nodes #store nodes
nodes <- nodes %>% select(-color) #remove color nodes
edges <- vism$edges #store edges
graphm = simplify(graphm, remove.loops = TRUE) #remove loops
vism_comm <- walktrap.community(graphm) #find clusters using igraph
modularity(vism_comm) #modularity
#vism_comm
length(vism_comm)
nodes$group <- membership(vism_comm) #store group info
#no physics
vism_graph <- visNetwork(nodes, edges, width = 1600, height = 900) %>% visPhysics(enabled = FALSE) %>%
visNodes(size = 8, font = c(size = 8)) %>% visEdges(color = c(opacity = 0.4))
vism_graph
vism_comm[[7]]
vism_comm[[1]]
#create tokens for males
toks.male <- token.all %>%
tokens_select(pattern = 'male/characters', padding = FALSE, window = 5)
male_fcmat = fcm(toks.male, context = c("window"),
count = c("weighted"),
window = 10)
male_fcmat
graph_m = graph_from_adjacency_matrix(male_fcmat, mode = "undirected")
graph_m = simplify(graph_m)
graph_m.comm <- walktrap.community(graph_m)
male_fcmat > 5
male_fcmat[male_fcmat > 5]
type(fcmat)
class(male_fcmat)
