#bind to overall data
all_ind <- rbind(all_ind, male_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
#facet_wrap(~ gender)
}
plot_word('agent/noun', 'noun')
ggsave("agent_noun_male.png", width = 6, height = 4)
plot_word('kill/verb', 'verb')
ggsave("kill_verb_male.png", width = 6, height = 4)
plot_word('hostage/noun', 'noun')
ggsave("hostage_noun_male.png", width = 6, height = 4)
plot_word('crime/noun', 'noun')
plot_word('criminal/noun', 'noun')
plot_word('bad/adj', 'adj')
plot_word('kill/verb', 'verb')
plot_word <- function(term, pos){
all_ind <- data.frame() #initialise
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, female_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
#facet_wrap(~ gender)
}
plot_word('kill/verb', 'verb')
graph = grapherdemo(20, token_filter3('adj', 1940, 1950, token.all))
#graph_plot = visIgraph(graph[[1]]) %>% visNodes(font = list(size = 28))
#graph_plot
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #graph
is_weighted(graph[[1]])
visIgraph(g) %>% visNodes(font = list(size = 24))
#male
dmat = distances(graph[[1]], v=V(graph[[1]]), to='male/characters')
male_c = dmat[, 'male/characters']
male_c = sort(male_c, decreasing = T)[1:20]
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters')
female_c = fmat[, 'female/characters']
female_c = sort(female_c, decreasing = T)[1:20]
allc = c(male_c, female_c)
allc = sort(allc, decreasing = T)
names(allc)
#random
mandf = intersect(names(female_c), names(male_c))
allc[names(allc) %in% mandf]
male_only = names(male_c[!names(male_c) %in% mandf])
graph = grapherdemo(20, token_filter3('all', 1940, 1950, token.all)) #create graph
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #display
#Top secondary co-occurences
#male
dmat = distances(graph[[1]], v=V(graph[[1]]), to='male/characters') #compute path weights
male_c = dmat[, 'male/characters'] #secondary to male
male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
female_c = fmat[, 'female/characters'] #secondary to male
female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#store all secondary
allc = c(male_c, female_c)
allc = sort(allc, decreasing = T) #sort decreasing
#why?
mandf = intersect(names(female_c), names(male_c))
allc[names(allc) %in% mandf]
male_only = names(male_c[!names(male_c) %in% mandf])
female_only = names(female_c[!names(female_c) %in% mandf])
#edge colors
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
#check
all_edges$V2[all_edges$V1 == 'female/characters']
#male_c = male_c[names(male_c != 'beach/noun')]
male.sec_bool <- all_edges$V2 %in% names(male_c)  #create bool of all male secondary co-oocs
female.sec_bool <- all_edges$V2 %in% names(female_c)  #create bool of all female secondary co-oocs
# E(g)$color <- ifelse(malet_bool == TRUE, adjustcolor('cornflowerblue'),
#                      ifelse(femalet_bool == TRUE, adjustcolor('orange'),
#                             'grey'))
visIgraph(g) #display
#color only male.sec and female.sec edges based on the start edge color
edge.start <- ends(g, es = E(g), names = F)[,1]
male_ps = intersect(all_edges$V1[male.sec_bool], names(male_primary))
female_ps = intersect(all_edges$V1[female.sec_bool], names(female_primary))
all_edges$V1[female.sec_bool]
#color only primary tropes that have a path
#mprimary_tropes = c('is/verb', 'friend/noun', 'takes/verb', 'tells/verb',
'kill/verb', 'agent/noun', 'help/noun',
'brother/noun', 'former/adj')
mprimary_tropes = male_ps
mprimary_tropes = mprimary_tropes[mprimary_tropes != 'female/characters']
m_pcolor = paste('male/characters', mprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
mp_bool = all_edges$V3 %in% m_pcolor
#fprimary_tropes = c('love/noun', 'marriage/noun', 'relationship/noun',
'tells/verb')
fprimary_tropes = female_ps
f_pcolor = paste('female/characters', fprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
all_edges$V1[all_edges$V2 == 'tells/verb']
fp_bool = all_edges$V3 %in% f_pcolor
E(g)$color <-  adjustcolor('grey', alpha=0.9)
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],
ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))))
visIgraph(g)
all_edges$V3[malet_bool]
V(g)$color <- ifelse(V(g)$name == c('male/characters'), adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% c('female/characters'), adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(intersect(mprimary_tropes, fprimary_tropes)), adjustcolor('purple', alpha = 0.9),
ifelse(V(g)$name %in% mprimary_tropes, adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% fprimary_tropes, adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(names(male_c), names(female_c)), adjustcolor('darkgrey', alpha = 0.9),
adjustcolor('grey', alpha = 0.2)))))))
#V(g)$color <- when(V(g)$name %in% 'male/character', adjustcolor('red', alpha = 0.8))
visIgraph(g)
keep_nodes = names(c(allc, male_primary, female_primary))
keep_nodes = c(keep_nodes, 'male/characters', 'female/characters')
remove_nodes = names(V(g))[!names(V(g)) %in% keep_nodes]
g_trim <- g - remove_nodes
visIgraph(g_trim) %>% visNodes(font = list(size = 26))
graph = grapherdemo(20, token_filter3('all', 2010, 2020, token.all)) #create graph
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #display
#Top secondary co-occurences
#male
dmat = distances(graph[[1]], v=V(graph[[1]]), to='male/characters') #compute path weights
male_c = dmat[, 'male/characters'] #secondary to male
male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
female_c = fmat[, 'female/characters'] #secondary to male
female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#store all secondary
allc = c(male_c, female_c)
allc = sort(allc, decreasing = T) #sort decreasing
#why?
mandf = intersect(names(female_c), names(male_c))
allc[names(allc) %in% mandf]
male_only = names(male_c[!names(male_c) %in% mandf])
female_only = names(female_c[!names(female_c) %in% mandf])
#edge colors
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
#check
all_edges$V2[all_edges$V1 == 'female/characters']
#male_c = male_c[names(male_c != 'beach/noun')]
male.sec_bool <- all_edges$V2 %in% names(male_c)  #create bool of all male secondary co-oocs
female.sec_bool <- all_edges$V2 %in% names(female_c)  #create bool of all female secondary co-oocs
# E(g)$color <- ifelse(malet_bool == TRUE, adjustcolor('cornflowerblue'),
#                      ifelse(femalet_bool == TRUE, adjustcolor('orange'),
#                             'grey'))
visIgraph(g) #display
#color only male.sec and female.sec edges based on the start edge color
edge.start <- ends(g, es = E(g), names = F)[,1]
male_ps = intersect(all_edges$V1[male.sec_bool], names(male_primary))
female_ps = intersect(all_edges$V1[female.sec_bool], names(female_primary))
all_edges$V1[female.sec_bool]
#color only primary tropes that have a path
#mprimary_tropes = c('is/verb', 'friend/noun', 'takes/verb', 'tells/verb',
'kill/verb', 'agent/noun', 'help/noun',
'brother/noun', 'former/adj')
mprimary_tropes = male_ps
mprimary_tropes = mprimary_tropes[mprimary_tropes != 'female/characters']
m_pcolor = paste('male/characters', mprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
mp_bool = all_edges$V3 %in% m_pcolor
#fprimary_tropes = c('love/noun', 'marriage/noun', 'relationship/noun',
'tells/verb')
fprimary_tropes = female_ps
f_pcolor = paste('female/characters', fprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
all_edges$V1[all_edges$V2 == 'tells/verb']
fp_bool = all_edges$V3 %in% f_pcolor
E(g)$color <-  adjustcolor('grey', alpha=0.9)
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],
ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))))
visIgraph(g)
all_edges$V3[malet_bool]
V(g)$color <- ifelse(V(g)$name == c('male/characters'), adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% c('female/characters'), adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(intersect(mprimary_tropes, fprimary_tropes)), adjustcolor('purple', alpha = 0.9),
ifelse(V(g)$name %in% mprimary_tropes, adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% fprimary_tropes, adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(names(male_c), names(female_c)), adjustcolor('darkgrey', alpha = 0.9),
adjustcolor('grey', alpha = 0.2)))))))
#V(g)$color <- when(V(g)$name %in% 'male/character', adjustcolor('red', alpha = 0.8))
visIgraph(g)
keep_nodes = names(c(allc, male_primary, female_primary))
keep_nodes = c(keep_nodes, 'male/characters', 'female/characters')
remove_nodes = names(V(g))[!names(V(g)) %in% keep_nodes]
g_trim <- g - remove_nodes
visIgraph(g_trim) %>% visNodes(font = list(size = 26))
plot_word <- function(term, pos){
all_ind <- data.frame() #initialise
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, male_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
#facet_wrap(~ gender)
}
plot_word('job/noun', 'noun')
plot_word('prison/noun', 'noun')
plot_word('kill/noun', 'noun')
plot_word('agent/noun', 'noun')
plot_word('prison/noun', 'noun')
plot_word('love/noun', 'noun')
plot_word('job/noun', 'noun')
ggsave("job_noun_male.png", width = 6, height = 4)
plot_word('agent/noun', 'noun')
ggsave("agent_noun_male.png", width = 6, height = 4)
plot_word('kill/verb', 'verb')
ggsave("kill_verb_male.png", width = 6, height = 4)
plot_word('prison/noun', 'noun')
ggsave("prison_noun_male.png", width = 6, height = 4)
plot_word <- function(term, pos){
all_ind <- data.frame() #initialise
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, female_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
#facet_wrap(~ gender)
}
plot_word('love/noun', 'noun')
ggsave("love_noun_female.png", width = 6, height = 4)
plot_word('relationship/noun', 'noun')
ggsave("relationship_noun_female.png", width = 6, height = 4)
plot_word('marry/verb', 'verb')
ggsave("marry_verb_female.png", width = 6, height = 4)
plot_word('wedding/noun', 'noun')
ggsave("wedding_noun_female.png", width = 6, height = 4)
plot_word <- function(term, pos){
all_ind <- data.frame() #initialise
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, male_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
#facet_wrap(~ gender)
}
plot_word('boss/noun', 'noun')
plot_word('office/noun', 'noun')
plot_word <- function(term, pos){
all_ind <- data.frame() #initialise
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, female_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
#facet_wrap(~ gender)
}
plot_word('wife/noun', 'noun')
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, male_ind)
}
plot_word <- function(term, pos){
all_ind <- data.frame() #initialise
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, male_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
#facet_wrap(~ gender)
}
plot_word('officer/noun', 'noun')
plot_word <- function(term, pos){
all_ind <- data.frame() #initialise
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, female_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
#facet_wrap(~ gender)
}
plot_word('dating/verb', 'verb')
plot_word('attracted/verb', 'verb')
plot_word('beautiful/adj', 'adj')
plot_word('pregnant/adj', 'adj')
plot_word <- function(term, pos){
all_ind <- data.frame() #initialise
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, male_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
#facet_wrap(~ gender)
}
plot_word('corrupt/adj', 'adj')
plot_word('best/adj', 'adj')
plot_word('lawyer/noun', 'noun')
plot_word('owner/noun', 'noun')
plot_word('boss/noun', 'noun')
