print("hello")
setwd("~/Documents/GitHub/film_networks/data_function scripts")
library(tidyverse)
library(quanteda) #for text cleaning
library(igraph) #for creating graphs
library(visNetwork) #for visualizing graphs
library(wordcloud) #for creating wordclouds
#load_functions
source("calculatecoocstats.R") #calculate co-occurrence statistics
source("grapher.R") #create graph
#Wiedemann, Gregor; Niekler, Andreas (2017): Hands-on: A five day text mining course for humanists and social scientists in R. Proceedings of the 1st Workshop on Teaching NLP for Digital Humanities (Teach4DH@GSCL 2017), Berlin.
source("rawcounts.R") #find raw counts of co-occurrences
source("token_filter.R") #filter tokens
#load tokens, get it ready for analysis
load("token.all.RData")
#convert tokens to all lower
token.all <- tokens_tolower(token.all) #convert all tokens to lower
#create a token set with only generalized pos info
pos_replace <- function(toks.replace){
toks.replace <- toks.replace %>%
tokens_replace(pattern = c("*/NOUN", "*/VERB", "*/ADJ"), replacement = c("NOUN", "VERB", "ADJ"))
return(toks.replace)
}
token.pos <- pos_replace(token.all)
#create tokens for males
toks.male <- token.all %>%
tokens_select(pattern = 'male/characters', padding = FALSE, window = 5)
male_fcmat = fcm(toks.male, context = c("window"),
count = c("boolean"),
window = 5)
male_fcmat
class(male_fcmat)
graph_m = graph_from_adjacency_matrix(male_fcmat, mode = "undirected")
graph_m = simplify(graph_m)
graph_m.comm <- fastgreedy.community(graph_m)
length(graph_m.comm)
degrees(graph_m)
degree(graph_m)
head(degree(graph_m))
#plot(graph_m, vertex.size = 2, vertex.label = NA)
plot(graph_m.comm, graph_m, vertex.size = 2, vertex.label = ifelse(degree(g) > 2500, V(g)$label, NA))
#plot(graph_m, vertex.size = 2, vertex.label = NA)
plot(graph_m.comm, graph_m, vertex.size = 2, vertex.label = ifelse(degree(graph_m) > 2500, V(graph_m)$label, NA))
#plot(graph_m, vertex.size = 2, vertex.label = NA)
plot(graph_m.comm, graph_m, vertex.size = 2, vertex.label = NA)
minimumFrequency = 10
?dfm_weight
minimumFrequency = 10
binDTM <- toks.male %>%
dfm() %>%
dfm_trim(min_docfreq = minimumFrequency) %>%
dfm_weight("count")
comat <- t(binDTM) %*% binDTM
film_graph <- graph_from_adjacency_matrix(comat, mode = "undirected")
#plot.igraph(film_graph, vertex.label = NA, vertex.size = 8)
film_graph <- simplify(film_graph, remove.loops = TRUE)
c1 = cluster_fast_greedy(film_graph)
modularity(c1)
length(c1)
minimumFrequency = 50
binDTM <- toks.male %>%
dfm() %>%
dfm_trim(min_docfreq = minimumFrequency) %>%
dfm_weight("count")
comat <- t(binDTM) %*% binDTM
film_graph <- graph_from_adjacency_matrix(comat, mode = "undirected")
#plot.igraph(film_graph, vertex.label = NA, vertex.size = 8)
film_graph <- simplify(film_graph, remove.loops = TRUE)
c1 = cluster_fast_greedy(film_graph)
modularity(c1)
length(c1)
sizes(c1)
degree(film_graph)
# modularity matrix
plot.igraph(film_graph, vertex.color=membership(c1), vertex.label = ifelse(degree(film_graph) > 2000, V(film_graph)$label, NA), vertex.size = 10)
vertex.label = ifelse(degree(film_graph) > 1000, V(film_graph)$label, NA)
V(film_graph)$label
film_graph
film_graph$label
# modularity matrix
plot.igraph(film_graph, vertex.color=membership(c1), vertex.label = ifelse(degree(film_graph) > 1000, vertex.label, NA), vertex.size = 10)
E(film_graph)
V(film_graph)
# modularity matrix
plot.igraph(film_graph, vertex.color=membership(c1), vertex.label = ifelse(degree(film_graph) > 1000, V(film_graph), NA), vertex.size = 10)
# modularity matrix
plot.igraph(film_graph, vertex.color=membership(c1), vertex.label = ifelse(degree(film_graph) > 2500, V(film_graph), NA), vertex.size = 10)
# modularity matrix
plot.igraph(film_graph, vertex.color=membership(c1), vertex.size = 2, vertex.label = ifelse(degree(film_graph) > 2500, V(film_graph), NA), vertex.size = 10)
# modularity matrix
plot.igraph(film_graph, vertex.color=membership(c1), vertex.size = 2, vertex.label = ifelse(degree(film_graph) > 2500, V(film_graph), NA))
sizes)graph_m.comm
sizes(graph_m.comm)
graph_m.comm[[1]]
graph_m.comm[[2]]
head(graph_m.comm[[2]], 10)
degree(V(graph_m))
head(degree(graph_m))
head(degree(graph_m)[1])
head(degree(graph_m)[graph_m.comm[[2]]])
head(order(degree(graph_m)[graph_m.comm[[2]]])
head(order(degree(graph_m)[graph_m.comm[[2]]]))
order(degree(graph_m)[graph_m.comm[[2]]])
head(degree(graph_m)[graph_m.comm[[2]]])
degree(graph_m)[graph_m.comm[[2]]][1]
sort(degree(graph_m)[graph_m.comm[[2]]])
head(sort(degree(graph_m)[graph_m.comm[[2]]]), 10)
head(sort(degree(graph_m)[graph_m.comm[[2]]], decreasing = FALSE), 10)
head(sort(degree(graph_m)[graph_m.comm[[2]]], decreasing = TRUE), 10)
head(sort(degree(graph_m)[graph_m.comm[[2]]], decreasing = TRUE), 20)
head(sort(degree(graph_m)[graph_m.comm[[1]]], decreasing = TRUE), 20)
head(sort(degree(graph_m)[graph_m.comm[[3]]], decreasing = TRUE), 20)
?tokens_select
#select window of words around males and female characters
#males
toks.male <- token.all %>%
tokens_select(pattern = 'male/characters', selection = 'remove', padding = FALSE, window = 5)
#females
toks.female <- token.all %>%
tokens_select(pattern = 'female/characters', selection = 'remove', padding = FALSE, window = 5)
#feature co-occurence matrix for males
male_fcmat = fcm(toks.male, context = c("window"),
count = c("weighted"),
window = 5)
male_fcmat[1,1]
male_fcmat[4,4]
male_fcmat[:4,:4]
male_fcmat[1:4,1:4]
male_fcmat[1:2,1:2]
graph_m = graph_from_adjacency_matrix(male_fcmat, mode = "undirected")
graph_m = simplify(graph_m) #remove looping edges
graph_m.comm <- cluster_fast_greedy(graph_m)
#membership(graph_m.comm)
length(graph_m.comm)
sizes(graph_m.comm)
head(graph_m.comm[[1]], 10)
degree(V(graph_m))
head(sort(degree(graph_m)[graph_m.comm[[1]]], decreasing = TRUE), 20)
head(sort(degree(graph_m)[graph_m.comm[[2]]], decreasing = TRUE), 20)
head(sort(degree(graph_m)[graph_m.comm[[3]]], decreasing = TRUE), 20)
head(sort(degree(graph_m)[graph_m.comm[[4]]], decreasing = TRUE), 20)
head(sort(degree(graph_m)[graph_m.comm[[5]]], decreasing = TRUE), 20)
dfm_male = dfm(toks.male)
?dfm_trim
dfm_male <-  toks.male %>% dfm() %>% dfm_trim(min_termfreq = 10)
dfm_male
names(dfm_male)
dfm_male[1,1]
colnames(dfm_male)
male_filtered = colnames(dfm_male)
toks.male <- token.all %>%
tokens_select(pattern = male_filtered, selection = 'keep', padding = FALSE, window = 0)
length(toks.male)
#select window of words around males and female characters
#males
toks.male <- token.all %>%
tokens_select(pattern = 'male/characters', selection = 'remove', padding = FALSE, window = 5)
length(toks.male)
#females
toks.female <- token.all %>%
tokens_select(pattern = 'female/characters', selection = 'remove', padding = FALSE, window = 5)
dfm_male <-  toks.male %>% dfm() %>% dfm_trim(min_termfreq = 10)
male_filtered = colnames(dfm_male)
toks.male <- token.all %>%
tokens_select(pattern = male_filtered, selection = 'keep', padding = TRUE)
toks.male
toks.male <- token.all %>%
tokens_select(pattern = male_filtered, selection = 'keep', padding = FALSE)
toks.male
#feature co-occurrence matrix for males
male_fcmat = fcm(toks.male, context = c("window"),
count = c("weighted"), #words are weighted within the window
window = 5)
male_fcmat[1:2,1:2] #a small portion of the feature co-occurence matrix
graph_m = graph_from_adjacency_matrix(male_fcmat, mode = "undirected") #create graph from matrix
#select window of words around males and female characters
#males
toks.male <- token.all %>%
tokens_select(pattern = 'male/characters', selection = 'remove', padding = TRUE, window = 5)
dfm_male <-  toks.male %>% dfm() %>% dfm_trim(min_termfreq = 10)
male_filtered = colnames(dfm_male)
toks.male <- token.all %>%
tokens_select(pattern = male_filtered, selection = 'keep', padding = TRUE)
#feature co-occurrence matrix for males
male_fcmat = fcm(toks.male, context = c("window"),
count = c("weighted"), #words are weighted within the window
window = 5)
male_fcmat[1:2,1:2] #a small portion of the feature co-occurence matrix
graph_m = graph_from_adjacency_matrix(male_fcmat, mode = "undirected") #create graph from matrix
graph_m = simplify(graph_m) #remove looping edges
graph_m.comm <- cluster_fast_greedy(graph_m) #detect communities
#membership(graph_m.comm)
length(graph_m.comm) #number of communities - note that there are many small communities but few major ones
sizes(graph_m.comm)
head(graph_m.comm[[1]], 10)
head(sort(degree(graph_m)[graph_m.comm[[5]]], decreasing = TRUE), 20)
head(sort(degree(graph_m)[graph_m.comm[[1]]], decreasing = TRUE), 20)
head(sort(degree(graph_m)[graph_m.comm[[2]]], decreasing = TRUE), 20)
head(sort(degree(graph_m)[graph_m.comm[[3]]], decreasing = TRUE), 20)
#DETECTING COMMUNITIES IN FEMALE NETWORKS
#filter to keep only words that occur at least 10 times
dfm_female <-  toks.female %>% dfm() %>% dfm_trim(min_termfreq = 10)
female_filtered = colnames(dfm_female)
toks.female <- token.all %>%
tokens_select(pattern = female_filtered, selection = 'keep', padding = TRUE)
#feature co-occurrence matrix for females
female_fcmat = fcm(toks.female, context = c("window"),
count = c("weighted"), #words are weighted within the window
window = 5)
female_fcmat[1:2,1:2] #a small portion of the feature co-occurrence matrix
graph_m = graph_from_adjacency_matrix(female_fcmat, mode = "undirected") #create graph from matrix
graph_m = simplify(graph_m, remove.loops = TRUE) #remove self-looping edges
graph_m.comm <- cluster_fast_greedy(graph_m) #detect communities
graph_f = graph_from_adjacency_matrix(female_fcmat, mode = "undirected") #create graph from matrix
graph_f = simplify(graph_m, remove.loops = TRUE) #remove self-looping edges
graph_f.comm <- cluster_fast_greedy(graph_m) #detect communities
#membership(graph_m.comm)
length(graph_f.comm) #number of communities - note that there are many small communities but only few major ones
sizes(graph_f.comm) #sizes of communities
#nodes with highest degrees in each of the major communities
#community 1 - relationships?
head(sort(degree(graph_f)[graph_f.comm[[1]]], decreasing = TRUE), 20)
#community 2 - action?
head(sort(degree(graph_f)[graph_f.comm[[2]]], decreasing = TRUE), 20)
#community 3 - violence?
head(sort(degree(graph_f)[graph_f.comm[[3]]], decreasing = TRUE), 20)
#community 3 - relationships?
head(sort(degree(graph_f)[graph_f.comm[[3]]], decreasing = TRUE), 20)
sizes(graph_f.comm) #sizes of communities
head(sort(degree(graph_f)[graph_f.comm[[5]]], decreasing = TRUE), 20)
head(sort(degree(graph_f)[graph_f.comm[[4]]], decreasing = TRUE), 20)
#females
toks.female <- token.all %>%
tokens_select(pattern = 'female/characters', selection = 'remove', padding = TRUE, window = 5)
dfm_female <-  toks.female %>% dfm() %>% dfm_trim(min_termfreq = 10)
female_filtered = colnames(dfm_female)
toks.female <- token.all %>%
tokens_select(pattern = female_filtered, selection = 'keep', padding = TRUE)
#feature co-occurrence matrix for females
female_fcmat = fcm(toks.female, context = c("window"),
count = c("weighted"), #words are weighted within the window
window = 5)
female_fcmat[1:2,1:2] #a small portion of the feature co-occurrence matrix
graph_f = graph_from_adjacency_matrix(female_fcmat, mode = "undirected") #create graph from matrix
graph_f = simplify(graph_m, remove.loops = TRUE) #remove self-looping edges
graph_f.comm <- cluster_fast_greedy(graph_m) #detect communities
#membership(graph_m.comm)
length(graph_f.comm) #number of communities - note that there are many small communities but only few major ones
sizes(graph_f.comm) #sizes of communities
#nodes with highest degrees in each of the major communities
#community 1 - violence?
head(sort(degree(graph_f)[graph_f.comm[[1]]], decreasing = TRUE), 20)
#community 2 - action?
head(sort(degree(graph_f)[graph_f.comm[[2]]], decreasing = TRUE), 20)
#community 3 - relationships?
head(sort(degree(graph_f)[graph_f.comm[[3]]], decreasing = TRUE), 20)
#community 3 - relationships?
head(sort(degree(graph_f)[graph_f.comm[[4]]], decreasing = TRUE), 20)
#community 3 - relationships?
head(sort(degree(graph_f)[graph_f.comm[[3]]], decreasing = TRUE), 20)
