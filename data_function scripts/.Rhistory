return(weights)
}
E(subgraph)$weight <- edge.weights(clust_obj, subgraph)
layout <- layout_with_fr(subgraph, weights=E(subgraph)$weight)
plot(subgraph, layout=layout, col = communityColors)
}
detect_communities(token.all, 'male')
detect_communities <- function(toks.all, gender = 'male'){
toks <- toks.all %>%
tokens_select(pattern = paste(gender, '/characters', sep = ''), selection = 'remove', padding = TRUE, window = 5)
#filter to keep only words that occur at least 10 times
dfm <-  toks %>% dfm() %>% dfm_trim(min_termfreq = 10)
filtered = colnames(dfm)
toks <- token.all %>%
tokens_select(pattern = filtered, selection = 'keep', padding = TRUE)
#feature co-occurrence matrix for males
fcmat = fcm(toks, context = c("window"),
count = c("weighted"), #words are weighted within the window
window = 5)
#fcmat[1:2,1:2] #a small portion of the feature co-occurrence matrix
graph = graph_from_adjacency_matrix(fcmat, weighted = TRUE) #create graph from matrix
edgelist <- get.data.frame(graph)
edgelist_m <- as.matrix(edgelist[ ,c("from", "to")])
graph <- graph_from_edgelist(edgelist_m, directed = FALSE)
graph <- set.edge.attribute(graph, "weight", value = edgelist$weight)
graph = simplify(graph, remove.loops = TRUE) #remove self-looping edges
#louvian communities
louvain <- cluster_louvain(graph, weights = E(graph)$weights)#detect communities
graph$community <- louvain$membership
#unique(male_graph$community)
paste('modularity =', modularity(louvain))
#most important word in each community
communities <- data.frame()
for (i in unique(graph$community)) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# get size of each subgraph
size <- igraph::gorder(subgraph)
# get betweenness centrality
btwn <-  igraph::betweenness(subgraph)
communities <- communities %>%
dplyr::bind_rows(
data.frame(community = i,
n_characters = size,
most_important = names(which(btwn == max(btwn)))
)
)
}
communities = arrange(communities, desc(n_characters))
top_comm <- communities$community[1:5]
#knitr::kable(communities %>%
#               dplyr::select(community, n_characters, most_important))
#top five in each community
top_ten <- data.frame()
n = 0
for (i in top_comm) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# for larger communities
#  if (igraph::gorder(subgraph) > 1055) {
n = n + 1
# get degree
degree <-  igraph::degree(subgraph)
# get top ten degrees
top <- names(head(sort(degree, decreasing = TRUE), 20))
result <- data.frame(community = i, rank = 1:20, character = top)
# } else {
#   result <- data.frame(community = NULL, rank = NULL, character = NULL)
#}
top_ten <- top_ten %>%
dplyr::bind_rows(result)
}
print(top_ten)
n
# knitr::kable(
#   top_five %>%
#     tidyr::pivot_wider(names_from = rank, values_from = character)
# )
#Visualising the communities
subgraph <- induced_subgraph(graph, v = top_ten$character)
subgraph <- simplify(subgraph)
subgraph$community
nodes = data.frame(character = names(V(subgraph)))
group = rep(1:n, each = 20)
top_ten$group = group
clusters = inner_join(nodes, top_ten)
subgraph$community <- clusters$group
#unique(subgraph$community)
# give our nodes some properties, incl scaling them by degree and coloring them by community
V(subgraph)$size <- 5
V(subgraph)$frame.color <- "white"
V(subgraph)$color <- subgraph$community
#V(male_subgraph)$label <- V(male_subgraph)$name
V(subgraph)$label.cex <- 1.5
# also color edges according to their starting node
edge.start <- ends(subgraph, es = E(subgraph), names = F)[,1]
E(subgraph)$color <- V(subgraph)$color[edge.start]
E(subgraph)$arrow.mode <- 0
# only label central characters
#v_labels <- which(V(friends_graph)$name %in% friends)
#for (i in 1:length(V(friends_graph))) {
#  if (!(i %in% v_labels)) {
#    V(friends_graph)$label[i] <- ""
#  }
#}
#l2 <- layout_with_mds(male_subgraph)
#layout <- layout_with_kk(male_subgraph, weights=weights)
#plot(graph, layout=layout)
#plot(male_subgraph, rescale = T, layout = l2, main = "Male Graph")
#length(V(male_subgraph))
#visIgraph(male_subgraph) %>% visIgraphLayout(layout = "layout_with_mds") %>% visNodes(size = 12)
#layout_in_circle
#"layout_with_mds"
#plot by groups
#make clusters first
clust_obj = make_clusters(subgraph, membership = clusters$group)
# weights <- ifelse(crossing(male_clust, male_subgraph), 1, 100)
# layout <- layout_with_kk(male_subgraph, weights=weights)
# plot(male_subgraph, layout=layout)
prettyColors <- c("turquoise4", "azure4", "olivedrab","deeppink4", "blue")
communityColors <- prettyColors[membership(clust_obj)]
edge.weights <- function(community, network, weight.within = 100, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
E(subgraph)$weight <- edge.weights(clust_obj, subgraph)
layout <- layout_with_fr(subgraph, weights=E(subgraph)$weight)
plot(subgraph, layout=layout, col = communityColors)
}
detect_communities(token.all, 'male')
detect_communities(token.all, 'female')
detect_communities(token.all, 'male')
detect_communities(token.all, 'female')
#gender = 'male'
#DETECTING COMMUNITIES
toks.all = token.all
#gender = 'female'
detect_communities <- function(toks.all, gender = 'male'){
toks <- toks.all %>%
tokens_select(pattern = paste(gender, '/characters', sep = ''), selection = 'remove', padding = TRUE, window = 5)
#filter to keep only words that occur at least 10 times
dfm <-  toks %>% dfm() %>% dfm_trim(min_termfreq = 10)
filtered = colnames(dfm)
toks <- token.all %>%
tokens_select(pattern = filtered, selection = 'keep', padding = TRUE)
#feature co-occurrence matrix for males
fcmat = fcm(toks, context = c("window"),
count = c("boolean"), #words are weighted within the window
window = 1)
#fcmat[1:2,1:2] #a small portion of the feature co-occurrence matrix
graph = graph_from_adjacency_matrix(fcmat, weighted = FALSE) #create graph from matrix
edgelist <- get.data.frame(graph)
edgelist_m <- as.matrix(edgelist[ ,c("from", "to")])
graph <- graph_from_edgelist(edgelist_m, directed = FALSE)
#graph <- set.edge.attribute(graph, "weight", value = edgelist$weight)
graph = simplify(graph, remove.loops = TRUE) #remove self-looping edges
#louvian communities
louvain <- cluster_louvain(graph)#detect communities weights = E(graph)$weights
graph$community <- louvain$membership
#unique(male_graph$community)
paste('modularity =', modularity(louvain))
#most important word in each community
communities <- data.frame()
for (i in unique(graph$community)) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# get size of each subgraph
size <- igraph::gorder(subgraph)
# get betweenness centrality
btwn <-  igraph::betweenness(subgraph)
communities <- communities %>%
dplyr::bind_rows(
data.frame(community = i,
n_characters = size,
most_important = names(which(btwn == max(btwn)))
)
)
}
communities = arrange(communities, desc(n_characters))
top_comm <- communities$community[1:5]
#knitr::kable(communities %>%
#               dplyr::select(community, n_characters, most_important))
#top five in each community
top_ten <- data.frame()
n = 0
for (i in top_comm) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# for larger communities
#  if (igraph::gorder(subgraph) > 1055) {
n = n + 1
# get degree
degree <-  igraph::degree(subgraph)
# get top ten degrees
top <- names(head(sort(degree, decreasing = TRUE), 20))
result <- data.frame(community = i, rank = 1:20, character = top)
# } else {
#   result <- data.frame(community = NULL, rank = NULL, character = NULL)
#}
top_ten <- top_ten %>%
dplyr::bind_rows(result)
}
print(top_ten)
n
# knitr::kable(
#   top_five %>%
#     tidyr::pivot_wider(names_from = rank, values_from = character)
# )
#Visualising the communities
subgraph <- induced_subgraph(graph, v = top_ten$character)
subgraph <- simplify(subgraph)
subgraph$community
nodes = data.frame(character = names(V(subgraph)))
group = rep(1:n, each = 20)
top_ten$group = group
clusters = inner_join(nodes, top_ten)
subgraph$community <- clusters$group
#unique(subgraph$community)
# give our nodes some properties, incl scaling them by degree and coloring them by community
V(subgraph)$size <- 5
V(subgraph)$frame.color <- "white"
V(subgraph)$color <- subgraph$community
#V(male_subgraph)$label <- V(male_subgraph)$name
V(subgraph)$label.cex <- 1.5
# also color edges according to their starting node
edge.start <- ends(subgraph, es = E(subgraph), names = F)[,1]
E(subgraph)$color <- V(subgraph)$color[edge.start]
E(subgraph)$arrow.mode <- 0
# only label central characters
#v_labels <- which(V(friends_graph)$name %in% friends)
#for (i in 1:length(V(friends_graph))) {
#  if (!(i %in% v_labels)) {
#    V(friends_graph)$label[i] <- ""
#  }
#}
#l2 <- layout_with_mds(male_subgraph)
#layout <- layout_with_kk(male_subgraph, weights=weights)
#plot(graph, layout=layout)
#plot(male_subgraph, rescale = T, layout = l2, main = "Male Graph")
#length(V(male_subgraph))
#visIgraph(male_subgraph) %>% visIgraphLayout(layout = "layout_with_mds") %>% visNodes(size = 12)
#layout_in_circle
#"layout_with_mds"
#plot by groups
#make clusters first
clust_obj = make_clusters(subgraph, membership = clusters$group)
# weights <- ifelse(crossing(male_clust, male_subgraph), 1, 100)
# layout <- layout_with_kk(male_subgraph, weights=weights)
# plot(male_subgraph, layout=layout)
prettyColors <- c("turquoise4", "azure4", "olivedrab","deeppink4", "blue")
communityColors <- prettyColors[membership(clust_obj)]
edge.weights <- function(community, network, weight.within = 100, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
E(subgraph)$weight <- edge.weights(clust_obj, subgraph)
layout <- layout_with_fr(subgraph, weights=E(subgraph)$weight)
plot(subgraph, layout=layout, col = communityColors)
}
detect_communities(token.all, 'male')
#gender = 'female'
detect_communities <- function(toks.all, gender = 'male'){
toks <- toks.all %>%
tokens_select(pattern = paste(gender, '/characters', sep = ''), selection = 'remove', padding = TRUE, window = 5)
#filter to keep only words that occur at least 10 times
dfm <-  toks %>% dfm() %>% dfm_trim(min_termfreq = 10)
filtered = colnames(dfm)
toks <- token.all %>%
tokens_select(pattern = filtered, selection = 'keep', padding = TRUE)
#feature co-occurrence matrix for males
fcmat = fcm(toks, context = c("window"),
count = c("boolean"), #words are weighted within the window
window = 1)
#fcmat[1:2,1:2] #a small portion of the feature co-occurrence matrix
graph = graph_from_adjacency_matrix(fcmat) # weighted = TRUE create graph from matrix
edgelist <- get.data.frame(graph)
edgelist_m <- as.matrix(edgelist[ ,c("from", "to")])
graph <- graph_from_edgelist(edgelist_m, directed = FALSE)
#graph <- set.edge.attribute(graph, "weight", value = edgelist$weight)
graph = simplify(graph, remove.loops = TRUE) #remove self-looping edges
#louvian communities
louvain <- cluster_louvain(graph)#detect communities weights = E(graph)$weights
graph$community <- louvain$membership
#unique(male_graph$community)
paste('modularity =', modularity(louvain))
#most important word in each community
communities <- data.frame()
for (i in unique(graph$community)) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# get size of each subgraph
size <- igraph::gorder(subgraph)
# get betweenness centrality
btwn <-  igraph::betweenness(subgraph)
communities <- communities %>%
dplyr::bind_rows(
data.frame(community = i,
n_characters = size,
most_important = names(which(btwn == max(btwn)))
)
)
}
communities = arrange(communities, desc(n_characters))
top_comm <- communities$community[1:5]
#knitr::kable(communities %>%
#               dplyr::select(community, n_characters, most_important))
#top five in each community
top_ten <- data.frame()
n = 0
for (i in top_comm) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# for larger communities
#  if (igraph::gorder(subgraph) > 1055) {
n = n + 1
# get degree
degree <-  igraph::degree(subgraph)
# get top ten degrees
top <- names(head(sort(degree, decreasing = TRUE), 20))
result <- data.frame(community = i, rank = 1:20, character = top)
# } else {
#   result <- data.frame(community = NULL, rank = NULL, character = NULL)
#}
top_ten <- top_ten %>%
dplyr::bind_rows(result)
}
print(top_ten)
n
# knitr::kable(
#   top_five %>%
#     tidyr::pivot_wider(names_from = rank, values_from = character)
# )
#Visualising the communities
subgraph <- induced_subgraph(graph, v = top_ten$character)
subgraph <- simplify(subgraph)
subgraph$community
nodes = data.frame(character = names(V(subgraph)))
group = rep(1:n, each = 20)
top_ten$group = group
clusters = inner_join(nodes, top_ten)
subgraph$community <- clusters$group
#unique(subgraph$community)
# give our nodes some properties, incl scaling them by degree and coloring them by community
V(subgraph)$size <- 5
V(subgraph)$frame.color <- "white"
V(subgraph)$color <- subgraph$community
#V(male_subgraph)$label <- V(male_subgraph)$name
V(subgraph)$label.cex <- 1.5
# also color edges according to their starting node
edge.start <- ends(subgraph, es = E(subgraph), names = F)[,1]
E(subgraph)$color <- V(subgraph)$color[edge.start]
E(subgraph)$arrow.mode <- 0
# only label central characters
#v_labels <- which(V(friends_graph)$name %in% friends)
#for (i in 1:length(V(friends_graph))) {
#  if (!(i %in% v_labels)) {
#    V(friends_graph)$label[i] <- ""
#  }
#}
#l2 <- layout_with_mds(male_subgraph)
#layout <- layout_with_kk(male_subgraph, weights=weights)
#plot(graph, layout=layout)
#plot(male_subgraph, rescale = T, layout = l2, main = "Male Graph")
#length(V(male_subgraph))
#visIgraph(male_subgraph) %>% visIgraphLayout(layout = "layout_with_mds") %>% visNodes(size = 12)
#layout_in_circle
#"layout_with_mds"
#plot by groups
#make clusters first
clust_obj = make_clusters(subgraph, membership = clusters$group)
# weights <- ifelse(crossing(male_clust, male_subgraph), 1, 100)
# layout <- layout_with_kk(male_subgraph, weights=weights)
# plot(male_subgraph, layout=layout)
prettyColors <- c("turquoise4", "azure4", "olivedrab","deeppink4", "blue")
communityColors <- prettyColors[membership(clust_obj)]
edge.weights <- function(community, network, weight.within = 100, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
E(subgraph)$weight <- edge.weights(clust_obj, subgraph)
layout <- layout_with_fr(subgraph, weights=E(subgraph)$weight)
plot(subgraph, layout=layout, col = communityColors)
}
detect_communities(token.all, 'male')
detect_communities <- function(toks.all, gender = 'male'){
toks <- toks.all
#%>%
#   tokens_select(pattern = paste(gender, '/characters', sep = ''), selection = 'remove', padding = TRUE, window = 5)
#filter to keep only words that occur at least 10 times
dfm <-  toks %>% dfm() %>% dfm_trim(min_termfreq = 10)
filtered = colnames(dfm)
toks <- token.all %>%
tokens_select(pattern = filtered, selection = 'keep', padding = TRUE)
#feature co-occurrence matrix for males
fcmat = fcm(toks, context = c("window"),
count = c("weighted"), #words are weighted within the window
window = 5)
#fcmat[1:2,1:2] #a small portion of the feature co-occurrence matrix
graph = graph_from_adjacency_matrix(fcmat, weighted = TRUE) #create graph from matrix
edgelist <- get.data.frame(graph)
edgelist_m <- as.matrix(edgelist[ ,c("from", "to")])
graph <- graph_from_edgelist(edgelist_m, directed = FALSE)
graph <- set.edge.attribute(graph, "weight", value = edgelist$weight)
graph = simplify(graph, remove.loops = TRUE) #remove self-looping edges
#louvian communities
louvain <- cluster_louvain(graph, weights = E(graph)$weights)#detect communities
graph$community <- louvain$membership
#unique(male_graph$community)
paste('modularity =', modularity(louvain))
#most important word in each community
communities <- data.frame()
for (i in unique(graph$community)) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# get size of each subgraph
size <- igraph::gorder(subgraph)
# get betweenness centrality
btwn <-  igraph::betweenness(subgraph)
communities <- communities %>%
dplyr::bind_rows(
data.frame(community = i,
n_characters = size,
most_important = names(which(btwn == max(btwn)))
)
)
}
communities = arrange(communities, desc(n_characters))
top_comm <- communities$community[1:5]
#knitr::kable(communities %>%
#               dplyr::select(community, n_characters, most_important))
#top five in each community
top_ten <- data.frame()
n = 0
for (i in top_comm) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# for larger communities
#  if (igraph::gorder(subgraph) > 1055) {
n = n + 1
# get degree
degree <-  igraph::degree(subgraph)
# get top ten degrees
top <- names(head(sort(degree, decreasing = TRUE), 20))
result <- data.frame(community = i, rank = 1:20, character = top)
# } else {
#   result <- data.frame(community = NULL, rank = NULL, character = NULL)
#}
top_ten <- top_ten %>%
dplyr::bind_rows(result)
}
print(top_ten)
n
# knitr::kable(
#   top_five %>%
#     tidyr::pivot_wider(names_from = rank, values_from = character)
# )
#Visualising the communities
subgraph <- induced_subgraph(graph, v = top_ten$character)
subgraph <- simplify(subgraph)
subgraph$community
nodes = data.frame(character = names(V(subgraph)))
group = rep(1:n, each = 20)
top_ten$group = group
clusters = inner_join(nodes, top_ten)
subgraph$community <- clusters$group
#unique(subgraph$community)
# give our nodes some properties, incl scaling them by degree and coloring them by community
V(subgraph)$size <- 5
V(subgraph)$frame.color <- "white"
V(subgraph)$color <- subgraph$community
#V(male_subgraph)$label <- V(male_subgraph)$name
V(subgraph)$label.cex <- 1.5
# also color edges according to their starting node
edge.start <- ends(subgraph, es = E(subgraph), names = F)[,1]
E(subgraph)$color <- V(subgraph)$color[edge.start]
E(subgraph)$arrow.mode <- 0
# only label central characters
#v_labels <- which(V(friends_graph)$name %in% friends)
#for (i in 1:length(V(friends_graph))) {
#  if (!(i %in% v_labels)) {
#    V(friends_graph)$label[i] <- ""
#  }
#}
#l2 <- layout_with_mds(male_subgraph)
#layout <- layout_with_kk(male_subgraph, weights=weights)
#plot(graph, layout=layout)
#plot(male_subgraph, rescale = T, layout = l2, main = "Male Graph")
#length(V(male_subgraph))
#visIgraph(male_subgraph) %>% visIgraphLayout(layout = "layout_with_mds") %>% visNodes(size = 12)
#layout_in_circle
#"layout_with_mds"
#plot by groups
#make clusters first
clust_obj = make_clusters(subgraph, membership = clusters$group)
# weights <- ifelse(crossing(male_clust, male_subgraph), 1, 100)
# layout <- layout_with_kk(male_subgraph, weights=weights)
# plot(male_subgraph, layout=layout)
prettyColors <- c("turquoise4", "azure4", "olivedrab","deeppink4", "blue")
communityColors <- prettyColors[membership(clust_obj)]
edge.weights <- function(community, network, weight.within = 100, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
E(subgraph)$weight <- edge.weights(clust_obj, subgraph)
layout <- layout_with_fr(subgraph, weights=E(subgraph)$weight)
plot(subgraph, layout=layout, col = communityColors)
}
detect_communities(token.all, 'female')
