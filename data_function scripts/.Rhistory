#find shortest paths in unweighted graph to all grey nodes
#find grey nodes
top_tropes <- function(gender = 'male/characters'){
all_secondary = V(g)$name[!V(g)$name %in% c(names(male_primary), names(female_primary))]
all_secondary = all_secondary[!all_secondary %in% c('male/characters', 'female/characters')]
filter =  ifelse(gender == 'male/characters', 'female/characters', 'male/characters')
#find all shortest paths
a = shortest_paths(
g,
from = gender,
to = all_secondary,
weights = NA
)
l = data.frame()
#filter paths that go through females
for(i in 1:length(a$vpath)){
l_temp = data.frame(start = (a$vpath[[i]]$name)[1], mid = (a$vpath[[i]]$name)[2], end = (a$vpath[[i]]$name)[3])
l = rbind(l, l_temp)
}
l = l %>% filter(mid != filter)
#find weights of all these paths
for(i in 1:nrow(l)){
l[i, 4] = sum(E(g, path = c(l[i,1], l[i,2], l[i,3]))$weight)
}
#head(l)
l = arrange(l, desc(V4))
l <- distinct(l)
return(l)
}
## clean up text
top_male = top_tropes('male/characters')
top_female = top_tropes('female/characters')
top_male <- top_male %>% filter(mid %in% names(male_primary))
top_female <- top_female %>% filter(mid %in% names(female_primary))
top_male <- top_male %>% group_by(mid) %>% slice(which.max(V4))
top_female <- top_female %>% group_by(mid) %>% slice(which.max(V4))
top_male <- arrange(top_male, desc(V4))
top_female <- arrange(top_female, desc(V4))[1:20,]
####### stacked bar plot of paths ######################
top_male$path = paste(top_male$start, top_male$mid, top_male$end, sep = '--')
names(top_male)[4] = 'llr'
top_female$path = paste(top_female$start, top_female$mid, top_female$end, sep = '--')
names(top_female)[4] = 'llr'
mtt = ggplot(top_male, aes(x = reorder(path, llr), y = llr)) +
geom_bar(stat = 'identity', fill = 'deepskyblue4',
alpha = 0.7, color = 'black', width = 0.8) + coord_flip() +
xlab('word') + ylab('loglikelihood ratio') + theme_linedraw() +
ggtitle('Male')
ftt = ggplot(top_female, aes(x = reorder(path, -llr), y = llr)) +
geom_bar(stat = 'identity', fill = 'darkorange3',
alpha = 0.7, color = 'black', width = 0.8) + coord_flip() +
xlab('word') + ylab('loglikelihood ratio') + theme_linedraw() +
ggtitle('Female')
#mtt
#ggsave('male_tropes.png', width = 8, height = 5)
#ftt
#ggsave('female_tropes.png', width = 8, height = 5)
####################################### Network
#COLORING THESE EDGES
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
head(all_edges)
all_edges$V3 = paste(all_edges$V1, all_edges$V2, sep='-')
head(all_edges)
top_male$sec <- paste(top_male$mid, top_male$end, sep='-')
top_male$pri <- paste(top_male$start, top_male$mid, sep='-')
top_female$sec <- paste(top_female$mid, top_female$end, sep='-')
top_female$pri <- paste(top_female$start, top_female$mid, sep='-')
all_top = rbind(top_male, top_female)
edge.start <- ends(g, es = E(g), names = F)[,1]
E(g)$color <-  ifelse(all_edges$V3 %in% c(top_female$pri, 'wife/noun-female/characters', 'girlfriend/noun-female/characters', 'named/verb-female/characters', 'meets/verb-female/characters'),
adjustcolor('orange', alpha=0.8),
ifelse(all_edges$V3 %in% top_male$pri,
adjustcolor('cornflowerblue', alpha=0.8),
ifelse(all_edges$V3 %in% all_top$sec,
V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4))))
visIgraph(g)
all_edges$V3[all_edges$V3 == 'wife/noun-female/characters']
#for visualization##############################
top_male <- top_male[1:10,]
top_female <- top_female[1:10,]
all_top <- rbind(top_male, top_female)
to_trim <- V(g)$name[!V(g)$name %in% c(all_top$end, 'male/characters', 'female/characters', all_top$mid)]
g_trim = g - to_trim
visIgraph(g_trim) %>% visNodes(font = list(size = 28))
###############################################
return(g_trim)
}
t.1940 = sig_tropes(1940)
visIgraph(t.1940)
t.1940 = sig_tropes(2010)
visIgraph(t.1940)
#mtt
#ggsave('male_tropes.png', width = 8, height = 5)
#ftt
#ggsave('female_tropes.png', width = 8, height = 5)
####################################### Network
#COLORING THESE EDGES
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
head(all_edges)
all_edges$V3 = paste(all_edges$V1, all_edges$V2, sep='-')
head(all_edges)
top_male$sec <- paste(top_male$mid, top_male$end, sep='-')
top_male$pri <- paste(top_male$start, top_male$mid, sep='-')
top_female$sec <- paste(top_female$mid, top_female$end, sep='-')
top_female$pri <- paste(top_female$start, top_female$mid, sep='-')
all_top = rbind(top_male, top_female)
all_top
edge.start <- ends(g, es = E(g), names = F)[,1]
edge.start
all_top
#######function to return top most significant tropes################################
#find shortest paths in unweighted graph to all grey nodes
#find grey nodes
top_tropes <- function(gender = 'male/characters'){
all_secondary = V(g)$name[!V(g)$name %in% c(names(male_primary), names(female_primary))]
all_secondary = all_secondary[!all_secondary %in% c('male/characters', 'female/characters')]
filter =  ifelse(gender == 'male/characters', 'female/characters', 'male/characters')
#find all shortest paths
a = shortest_paths(
g,
from = gender,
to = all_secondary,
weights = NA
)
l = data.frame()
#filter paths that go through females
for(i in 1:length(a$vpath)){
l_temp = data.frame(start = (a$vpath[[i]]$name)[1], mid = (a$vpath[[i]]$name)[2], end = (a$vpath[[i]]$name)[3])
l = rbind(l, l_temp)
}
l = l %>% filter(mid != filter)
#find weights of all these paths
for(i in 1:nrow(l)){
l[i, 4] = sum(E(g, path = c(l[i,1], l[i,2], l[i,3]))$weight)
}
#head(l)
l = arrange(l, desc(V4))
l <- distinct(l)
return(l)
}
sig_tropes <- function(decade){
graph = grapherdemo(11, token_filter3('all', decade, decade+10, token.all)) #create graph
#graph = grapher('male/characters', 21, token.all)
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) %>% visNodes(font = list(size = 26))  #display
#g = simplify(g)
#Top secondary co-occurences
# #male
# dmat = distances(g, v='male/characters', to='beach/noun', weights = NA) #compute path weights
# male_c = dmat['male/characters', ] #secondary to male
# male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#
# #female
# fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
# female_c = fmat[, 'female/characters'] #secondary to male
# female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#######function to return top most significant tropes################################
#find shortest paths in unweighted graph to all grey nodes
#find grey nodes
top_tropes <- function(gender = 'male/characters'){
all_secondary = V(g)$name[!V(g)$name %in% c(names(male_primary), names(female_primary))]
all_secondary = all_secondary[!all_secondary %in% c('male/characters', 'female/characters')]
filter =  ifelse(gender == 'male/characters', 'female/characters', 'male/characters')
#find all shortest paths
a = shortest_paths(
g,
from = gender,
to = all_secondary,
weights = NA
)
l = data.frame()
#filter paths that go through females
for(i in 1:length(a$vpath)){
l_temp = data.frame(start = (a$vpath[[i]]$name)[1], mid = (a$vpath[[i]]$name)[2], end = (a$vpath[[i]]$name)[3])
l = rbind(l, l_temp)
}
l = l %>% filter(mid != filter)
#find weights of all these paths
for(i in 1:nrow(l)){
l[i, 4] = sum(E(g, path = c(l[i,1], l[i,2], l[i,3]))$weight)
}
#head(l)
l = arrange(l, desc(V4))
l <- distinct(l)
return(l)
}
## clean up text
top_male = top_tropes('male/characters')
top_female = top_tropes('female/characters')
top_male <- top_male %>% filter(mid %in% names(male_primary))
top_female <- top_female %>% filter(mid %in% names(female_primary))
top_male <- top_male %>% group_by(mid) %>% slice(which.max(V4))
top_female <- top_female %>% group_by(mid) %>% slice(which.max(V4))
top_male <- arrange(top_male, desc(V4))
top_female <- arrange(top_female, desc(V4))[1:20,]
####### stacked bar plot of paths ######################
top_male$path = paste(top_male$start, top_male$mid, top_male$end, sep = '--')
names(top_male)[4] = 'llr'
top_female$path = paste(top_female$start, top_female$mid, top_female$end, sep = '--')
names(top_female)[4] = 'llr'
mtt = ggplot(top_male, aes(x = reorder(path, llr), y = llr)) +
geom_bar(stat = 'identity', fill = 'deepskyblue4',
alpha = 0.7, color = 'black', width = 0.8) + coord_flip() +
xlab('word') + ylab('loglikelihood ratio') + theme_linedraw() +
ggtitle('Male')
ftt = ggplot(top_female, aes(x = reorder(path, -llr), y = llr)) +
geom_bar(stat = 'identity', fill = 'darkorange3',
alpha = 0.7, color = 'black', width = 0.8) + coord_flip() +
xlab('word') + ylab('loglikelihood ratio') + theme_linedraw() +
ggtitle('Female')
#mtt
#ggsave('male_tropes.png', width = 8, height = 5)
#ftt
#ggsave('female_tropes.png', width = 8, height = 5)
####################################### Network
#COLORING THESE EDGES
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
head(all_edges)
all_edges$V3 = paste(all_edges$V1, all_edges$V2, sep='-')
head(all_edges)
top_male$sec <- paste(top_male$mid, top_male$end, sep='-')
top_male$pri <- paste(top_male$start, top_male$mid, sep='-')
top_female$sec <- paste(top_female$mid, top_female$end, sep='-')
top_female$pri <- paste(top_female$start, top_female$mid, sep='-')
all_top = rbind(top_male, top_female)
edge.start <- ends(g, es = E(g), names = F)[,1]
E(g)$color <-  ifelse(all_edges$V3 %in% c(top_female$pri, 'wife/noun-female/characters', 'girlfriend/noun-female/characters', 'named/verb-female/characters', 'meets/verb-female/characters'),
adjustcolor('orange', alpha=0.8),
ifelse(all_edges$V3 %in% top_male$pri,
adjustcolor('cornflowerblue', alpha=0.8),
ifelse(all_edges$V3 %in% all_top$sec,
V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4))))
visIgraph(g)
all_edges$V3[all_edges$V3 == 'wife/noun-female/characters']
#for visualization##############################
top_male <- top_male[1:10,]
top_female <- top_female[1:10,]
all_top <- rbind(top_male, top_female)
to_trim <- V(g)$name[!V(g)$name %in% c(all_top$end, 'male/characters', 'female/characters', all_top$mid)]
g_trim = g - to_trim
visIgraph(g_trim) %>% visNodes(font = list(size = 28))
###############################################
sig_tropes.list = list()
sig_tropes.list[[1]] = g_trim
sig_tropes.list[[2]] = all_edges
sig_tropes.list[[3]] = all_top
return(sig_tropes.list)
}
t.1940 = sig_tropes(2010)
visIgraph(t.1940[[3]])
visIgraph(t.1940[[1]])
t.1940 = sig_tropes(1940)
visIgraph(t.1940[[1]])
t.2010 = sig_tropes(2010)
t.1940[[2]]
t.1940[[2]]$V3 %in% t.2010[[2]]$V3
bool.1940 = t.1940[[2]]$V3 %in% t.2010[[2]]$V3
E(g)$color <-  ifelse(bool.1940 == TRUE,
adjustcolor('grey', alpha=0.4),V(g)$color[edge.start])
g.1940 = t.1940[[1]]
E(g.1940)$color <-  ifelse(bool.1940 == TRUE,
adjustcolor('grey', alpha=0.4),V(g)$color[edge.start])
bool.1940 = t.2010[[2]]$V3 %in% t.1940[[2]]$V3
E(g.1940)$color <-  ifelse(bool.1940 == TRUE,
adjustcolor('grey', alpha=0.4),V(g)$color[edge.start])
bool.1940
all_edges = ends(g.1940, es = E(g.1940), names = T) #store all edges
all_edges = as.data.frame(all_edges)
all_edges
t.1940[[2]]$V3
all_edges
all_edges.1940 = ends(g.1940, es = E(g.1940), names = T) #store all edges
all_edges.1940 = as.data.frame(all_edges.1940)
all_edges.2010 = ends(g.2010, es = E(g.2010), names = T) #store all edges
g.2010 = t.2010[[1]]
all_edges.2010 = ends(g.2010, es = E(g.2010), names = T) #store all edges
all_edges.2010 = as.data.frame(all_edges.2010)
all_edges.1940
all_edges.2010
all_edges.1940 $V3 = paste(all_edges.1940$V1, all_edges.2010$V2, sep='-')
all_edges.1940 $V3 = paste(all_edges.1940$V1, all_edges.2940$V2, sep='-')
all_edges.1940 $V3 = paste(all_edges.1940$V1, all_edges.1940$V2, sep='-')
all_edges.2010$V3 = paste(all_edges.2010$V1, all_edges.2010$V2, sep='-')
all_edges.1940$V3 %in% all_edges.2010$V3
bool.1940 = all_edges.1940$V3 %in% all_edges.2010$V3
E(g.1940)$color <-  ifelse(bool.1940 == TRUE,
adjustcolor('grey', alpha=0.4),V(g)$color[edge.start])
visIgraph(g.1940)
E(g.1940)$color <-  ifelse(bool.1940 == FALSE,
adjustcolor('grey', alpha=0.4),V(g)$color[edge.start])
visIgraph(g.1940)
t.1940[[3]]
t.1940[[3]]$path
t.1940[[3]]$path %in% t.2010[[3]]$path
t.1940[[3]]$path[t.1940[[3]]$path %in% t.2010[[3]]$path]
t.2010[[3]]$path
t.1940[[3]]$path[t.1940[[3]]$path %in% t.2010[[3]]$path]
t.1940[[3]]$path[t.1940[[3]]$pri %in% t.2010[[3]]$pri]
t.2010[[3]]$path[t.2010[[3]]$pri %in% t.1940[[3]]$pri]
t.2010[[3]]
t.2010[[3]]$path[t.2010[[3]]$pri %in% t.1940[[3]]$pri]
t.1940[[3]]$path[t.1940[[3]]$pri %in% t.2010[[3]]$pri]
t.2010[[3]]$path[t.2010[[3]]$pri %in% t.1940[[3]]$pri]
t.2010[[3]]$path[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
t.1940[[3]]$path[!t.1940[[3]]$pri %in% t.2010[[3]]$pri]
t.2010[[3]]$path[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
pri_tc = t.2010[[3]]$pri[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
sec_tc = t.2010[[3]]$sec[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
pri_tc
sec_tc
all_edges.1940
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g)$color <-  ifelse(all_edges.1940 %in% pri_tc & all_edges$V1 == 'male/characters',
adjustcolor('blue'), adjustcolor('grey'))
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010 %in% pri_tc & all_edges$V1 == 'male/characters',
adjustcolor('blue'), adjustcolor('grey'))
all_edges.2010
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010 %in% pri_tc & all_edges.2010$V1 == 'male/characters',
adjustcolor('blue'), adjustcolor('grey'))
all_edges.2010 %in% pri_tc
all_edges.2010
pri_tc
all_edges.2010$V3 %in% pri_tc
all_edges.2010$V1
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'male/characters',
adjustcolor('blue'), adjustcolor('grey'))
visIgraph(g.2010)
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'male/characters',
adjustcolor('cornflowerblue', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'female/characters',
adjustcolor('orange', alpha = 0.8),
adjustcolor('grey', alpha = 0.4)))
visIgraph(g.2010)
edge.start <- ends(g.2010, es = E(g.2010), names = F)[,1]
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'male/characters',
adjustcolor('cornflowerblue', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'female/characters',
adjustcolor('orange', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% sec_tc,
V(g)$color[edge.start],
adjustcolor('grey', alpha = 0.4))))
visIgraph(g.2010)
t.1940 = sig_tropes(1940)
g.1940 = t.1940[[1]]
t.1940[[3]]$path[!t.1940[[3]]$pri %in% t.2010[[3]]$pri]
pri_tc = t.2010[[3]]$pri[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
sec_tc = t.2010[[3]]$sec[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
edge.start <- ends(g.2010, es = E(g.2010), names = F)[,1]
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'male/characters',
adjustcolor('cornflowerblue', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'female/characters',
adjustcolor('orange', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% sec_tc,
V(g)$color[edge.start],
adjustcolor('grey', alpha = 0.4))))
visIgraph(g.2010)
edge.start
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'male/characters',
adjustcolor('cornflowerblue', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'female/characters',
adjustcolor('orange', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% sec_tc,
V(g.2010)$color[edge.start],
adjustcolor('grey', alpha = 0.4))))
visIgraph(g.2010)
visIgraph(g.2010) %>% visNodes(font = list(size = 28))
pri_tc
strsplit(pri_tc, '-')
primary_col <- data.frame(pri_tc)
primary_col
separate(pri_tc, '-')
separate(pri_tc, '-')
separate(pri_tc, c('a', 'b'))
separate(pri_tc, c('A', 'B'), sep='-')
separate(pri_tc = c('A', 'B'), sep='-')
pri_tc %>% separate(pri_tc, c('A', 'B'), sep='-')
pri_tc %>% separate(primary_col, c('A', 'B'), sep='-')
primary_col %>% separate(pri_tc, c('A', 'B'), sep='-')
primary_col %>% separate(pri_tc, c(NA, 'B'), sep='-')
primary_col = primary_col %>% separate(pri_tc, c(NA, 'pri'), sep='-')
V(g.2010)$color
V(g.2010)$names
V(g.2010)$name
V(g.2010)$color[edge.start]
V(g.2010)$color
edge.start
V(g.2010)$color <- ifelse(!V(g.2010)$name %in% primary_col$pri,
V(g.2010)$color, adjustcolor('grey'))
visIgraph(g.2010) %>% visNodes(font = list(size = 28))
V(g.2010)$name
primary_col$pri
V(g.2010)$color <- ifelse(V(g.2010)$name %in% primary_col$pri,
V(g.2010)$color, adjustcolor('grey', alpha = '0.4'))
visIgraph(g.2010) %>% visNodes(font = list(size = 28))
t.1940 = sig_tropes(1940)
g.1940 = t.1940[[1]]
t.1940[[3]]$path[!t.1940[[3]]$pri %in% t.2010[[3]]$pri]
pri_tc = t.2010[[3]]$pri[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
sec_tc = t.2010[[3]]$sec[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
edge.start <- ends(g.2010, es = E(g.2010), names = F)[,1]
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'male/characters',
adjustcolor('cornflowerblue', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'female/characters',
adjustcolor('orange', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% sec_tc,
V(g.2010)$color[edge.start],
adjustcolor('grey', alpha = 0.4))))
primary_col <- data.frame(pri_tc)
primary_col = primary_col %>% separate(pri_tc, c(NA, 'pri'), sep='-')
V(g.2010)$color <- ifelse(V(g.2010)$name %in% primary_col$pri,
V(g.2010)$color, adjustcolor('grey', alpha = '0.4'))
visIgraph(g.2010) %>% visNodes(font = list(size = 28))
t.2010 = sig_tropes(2010)
g.2010 = t.2010[[1]]
t.1940 = sig_tropes(1940)
g.1940 = t.1940[[1]]
t.1940[[3]]$path[!t.1940[[3]]$pri %in% t.2010[[3]]$pri]
pri_tc = t.2010[[3]]$pri[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
sec_tc = t.2010[[3]]$sec[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
edge.start <- ends(g.2010, es = E(g.2010), names = F)[,1]
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'male/characters',
adjustcolor('cornflowerblue', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'female/characters',
adjustcolor('orange', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% sec_tc,
V(g.2010)$color[edge.start],
adjustcolor('grey', alpha = 0.4))))
primary_col <- data.frame(pri_tc)
primary_col = primary_col %>% separate(pri_tc, c(NA, 'pri'), sep='-')
V(g.2010)$color <- ifelse(V(g.2010)$name %in% primary_col$pri,
V(g.2010)$color, adjustcolor('grey', alpha = '0.4'))
visIgraph(g.2010) %>% visNodes(font = list(size = 28))
V(g.2010)$color <- ifelse(V(g.2010)$name %in% c(primary_col$pri, 'male/characters', 'female/characters',
V(g.2010)$color <- ifelse(V(g.2010)$name %in% c(primary_col$pri, 'male/characters', 'female/characters'),
V(g.2010)$color, adjustcolor('grey', alpha = '0.4'))
visIgraph(g.2010) %>% visNodes(font = list(size = 28))
V(g.2010)$color <- ifelse(V(g.2010)$name %in% c(primary_col$pri, 'male/characters', 'female/characters'),
V(g.2010)$color, adjustcolor('grey', alpha = '0.4'))
visIgraph(g.2010) %>% visNodes(font = list(size = 28))
t.2010 = sig_tropes(2010)
g.2010 = t.2010[[1]]
t.1940 = sig_tropes(1940)
g.1940 = t.1940[[1]]
pri_tc = t.2010[[3]]$pri[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
sec_tc = t.2010[[3]]$sec[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
edge.start <- ends(g.2010, es = E(g.2010), names = F)[,1]
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'male/characters',
adjustcolor('cornflowerblue', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'female/characters',
adjustcolor('orange', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% sec_tc,
V(g.2010)$color[edge.start],
adjustcolor('grey', alpha = 0.4))))
primary_col <- data.frame(pri_tc)
primary_col = primary_col %>% separate(pri_tc, c(NA, 'pri'), sep='-')
V(g.2010)$color <- ifelse(V(g.2010)$name %in% c(primary_col$pri, 'male/characters', 'female/characters'),
V(g.2010)$color, adjustcolor('grey', alpha = '0.4'))
visIgraph(g.2010) %>% visNodes(font = list(size = 28))
all_edges.1940
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.1940)$color <-  ifelse(all_edges.1940$V3 %in% pri_tc & all_edges.1940$V1 == 'male/characters',
adjustcolor('cornflowerblue', alpha = 0.8),
ifelse(all_edges.1940$V3 %in% pri_tc & all_edges.1940$V1 == 'female/characters',
adjustcolor('orange', alpha = 0.8),
ifelse(all_edges.1940$V3 %in% sec_tc,
V(g.1940)$color[edge.start],
adjustcolor('grey', alpha = 0.4))))
primary_col <- data.frame(pri_tc)
primary_col = primary_col %>% separate(pri_tc, c(NA, 'pri'), sep='-')
V(g.1940)$color <- ifelse(V(g.1940)$name %in% c(primary_col$pri, 'male/characters', 'female/characters'),
V(g.1940)$color, adjustcolor('grey', alpha = '0.4'))
visIgraph(g.1940) %>% visNodes(font = list(size = 28))
### 2010
t.2010 = sig_tropes(2010)
g.2010 = t.2010[[1]]
all_edges.2010 = t.2010[[2]]
t.1940 = sig_tropes(1940)
g.1940 = t.1940[[1]]
all_edges.1940 = t.1940[[2]]
pri_tc = t.2010[[3]]$pri[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
sec_tc = t.2010[[3]]$sec[!t.2010[[3]]$pri %in% t.1940[[3]]$pri]
edge.start <- ends(g.2010, es = E(g.2010), names = F)[,1]
#edge.start <- ends(g, es = E(g), names = F)[,1]
E(g.2010)$color <-  ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'male/characters',
adjustcolor('cornflowerblue', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% pri_tc & all_edges.2010$V1 == 'female/characters',
adjustcolor('orange', alpha = 0.8),
ifelse(all_edges.2010$V3 %in% sec_tc,
V(g.2010)$color[edge.start],
adjustcolor('grey', alpha = 0.4))))
primary_col <- data.frame(pri_tc)
primary_col = primary_col %>% separate(pri_tc, c(NA, 'pri'), sep='-')
V(g.2010)$color <- ifelse(V(g.2010)$name %in% c(primary_col$pri, 'male/characters', 'female/characters'),
V(g.2010)$color, adjustcolor('grey', alpha = '0.4'))
visIgraph(g.2010) %>% visNodes(font = list(size = 28))
