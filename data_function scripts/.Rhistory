#create tokens for males
toks.male <- token.all %>%
tokens_select(pattern = 'male/characters', padding = FALSE, window = 5)
#load libraries
library(tidyverse)
library(quanteda) #for text cleaning
library(igraph) #for creating graphs
library(visNetwork) #for visualizing graphs
library(wordcloud) #for creating wordclouds
#load_functions
source("calculatecoocstats.R") #calculate co-occurrence statistics
source("grapher.R") #create graph
source("rawcounts.R") #find raw counts of co-occurrences
source("token_filter.R") #filter tokens
#load tokens, get it ready for analysis
load("token.all.RData")
#convert tokens to all lower
token.all <- tokens_tolower(token.all) #convert all tokens to lower
setwd("~/Documents/GitHub/film_networks/data_function scripts")
#load libraries
library(tidyverse)
library(quanteda) #for text cleaning
library(igraph) #for creating graphs
library(visNetwork) #for visualizing graphs
library(wordcloud) #for creating wordclouds
#load_functions
source("calculatecoocstats.R") #calculate co-occurrence statistics
source("grapher.R") #create graph
source("rawcounts.R") #find raw counts of co-occurrences
source("token_filter.R") #filter tokens
#load tokens, get it ready for analysis
load("token.all.RData")
#convert tokens to all lower
token.all <- tokens_tolower(token.all) #convert all tokens to lower
#create tokens for males
toks.male <- token.all %>%
tokens_select(pattern = 'male/characters', padding = FALSE, window = 5)
male_fcmat = fcm(toks.male, context = c("window"),
count = c("weighted"),
window = 5)
male_fcmat
graph_m = graph_from_adjacency_matrix(male_fcmat, mode = "undirected")
graph_m = simplify(graph_m)
graph_m.comm <- cluster_fast_greedy(graph_m)
graph_m.comm
binDTM <- toks.male %>%
dfm() %>%
dfm_trim(min_docfreq = minimumFrequency) %>%
dfm_weight("count")
mimimumFrequency = 10
binDTM <- toks.male %>%
dfm() %>%
dfm_trim(min_docfreq = minimumFrequency) %>%
dfm_weight("count")
minimumFrequency = 10
binDTM <- toks.male %>%
dfm() %>%
dfm_trim(min_docfreq = minimumFrequency) %>%
dfm_weight("count")
comat <- t(binDTM) %*% binDTM
film_graph <- graph_from_adjacency_matrix(comat, mode = "undirected")
#plot.igraph(film_graph, vertex.label = NA, vertex.size = 8)
film_graph <- simplify(film_graph, remove.loops = TRUE)
c1 = cluster_fast_greedy(film_graph)
modularity(c1)
length(c1)
sizes(c1)
minimumFrequency = 20
binDTM <- toks.male %>%
dfm() %>%
dfm_trim(min_docfreq = minimumFrequency) %>%
dfm_weight("count")
comat <- t(binDTM) %*% binDTM
film_graph <- graph_from_adjacency_matrix(comat, mode = "undirected")
#plot.igraph(film_graph, vertex.label = NA, vertex.size = 8)
film_graph <- simplify(film_graph, remove.loops = TRUE)
c1 = cluster_fast_greedy(film_graph)
modularity(c1)
length(c1)
sizes(c1)
# modularity matrix
plot.igraph(film_graph, vertex.color=membership(c1), vertex.label = NA, vertex.size = 10)
minimumFrequency = 15
binDTM <- toks.male %>%
dfm() %>%
dfm_trim(min_docfreq = minimumFrequency) %>%
dfm_weight("count")
comat <- t(binDTM) %*% binDTM
film_graph <- graph_from_adjacency_matrix(comat, mode = "undirected")
#plot.igraph(film_graph, vertex.label = NA, vertex.size = 8)
film_graph <- simplify(film_graph, remove.loops = TRUE)
c1 = cluster_fast_greedy(film_graph)
modularity(c1)
length(c1)
sizes(c1)
minimumFrequency = 50
binDTM <- toks.male %>%
dfm() %>%
dfm_trim(min_docfreq = minimumFrequency) %>%
dfm_weight("count")
comat <- t(binDTM) %*% binDTM
film_graph <- graph_from_adjacency_matrix(comat, mode = "undirected")
#plot.igraph(film_graph, vertex.label = NA, vertex.size = 8)
film_graph <- simplify(film_graph, remove.loops = TRUE)
c1 = cluster_fast_greedy(film_graph)
modularity(c1)
# modularity matrix
plot.igraph(film_graph, vertex.color=membership(c1), vertex.label = NA, vertex.size = 10)
length(c1)
sizes(c1)
c1
c1[[2]]
c1[[3]]
c1[[1]]
head((c1[[1]])
head((c1[[1]]))
head((c1[[1]]))
head((c1[[2]]))
head((c1[[3]]))
head((c1[[4]]))
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 45, token_filter2("noun", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:20,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
#communities
graphm = graph.m[[1]]
vism <- toVisNetworkData(graphm)
nodes <- vism$nodes
edges <- vism$edges
graphm = simplify(graphm)
vism_comm <- cluster_fast_greedy(graphm)
membership(vism_comm)
vism_comm[[10]]
plot(vism_comm, graphm, vertex.size = 2, vertex.label = NA)
modularity(vism_comm)
vism_comm
vism_comm[[1]]
vism_comm[[2]]
'marriage' %in% vism_comm[[2]]
'marriage' %in% vism_comm[[1]]
'marriage' %in% vism_comm[[3]]
'marriage' %in% vism_comm[[4]]
'marriage' %in% vism_comm[[5]]
'marriage' %in% vism_comm[[6]]
'marriage' %in% vism_comm[[7]]
'marriage' %in% vism_comm[[8]]
'marriage' %in% vism_comm[[9]]
'marriage/noun' %in% vism_comm[[1]]
'marriage/noun' %in% vism_comm[[2]]
'marriage/noun' %in% vism_comm[[3]]
'marriage/noun' %in% vism_comm[[4]]
'marriage/noun' %in% vism_comm[[5]]
'marriage/noun' %in% vism_comm[[6]]
'marriage/noun' %in% vism_comm[[7]]
'marriage/noun' %in% vism_comm[[8]]
vism_comm
vism_comm[[1]]
vism_comm[[2]]
vism_comm[[3]]
vism_comm[[4]]
vism_comm[[5]]
vism_comm[[6]]
vism_comm[[7]]
vism_comm[[8]]
nodes$group <- membership(vism_comm)
#filter male and female
#
vis_graph <- visNetwork(nodes, edges, width = 1600, height = 900) %>% visPhysics(enabled = FALSE) %>%
visNodes(size = 8, font = c(size = 8)) %>% visEdges(color = c(opacity = 0.2))
vis_graph
graph.m = grapher("male/characters", 20, token_filter2("noun", 1940, 2010, token.all)) #extract graph info
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 20, token_filter2("noun", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:20,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
#communities
graphm = graph.m[[1]]
vism <- toVisNetworkData(graphm)
nodes <- vism$nodes
edges <- vism$edges
graphm = simplify(graphm)
vism_comm <- cluster_fast_greedy(graphm)
membership(vism_comm)
modularity(vism_comm)
nodes$group <- membership(vism_comm)
#filter male and female
#
vis_graph <- visNetwork(nodes, edges, width = 1600, height = 900) %>% visPhysics(enabled = FALSE) %>%
visNodes(size = 8, font = c(size = 8)) %>% visEdges(color = c(opacity = 0.2))
vis_graph
nodes
nodes <- nodes %>% select(-color)
#filter male and female
# no physics
vis_graph <- visNetwork(nodes, edges, width = 1600, height = 900) %>% visPhysics(enabled = FALSE) %>%
visNodes(size = 8, font = c(size = 8)) %>% visEdges(color = c(opacity = 0.4))
vis_graph
graph.m = grapher("male/characters", 25, token_filter2("noun", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:20,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
#communities
graphm = graph.m[[1]]
vism <- toVisNetworkData(graphm)
nodes <- vism$nodes
nodes <- nodes %>% select(-color)
edges <- vism$edges
graphm = simplify(graphm)
vism_comm <- cluster_fast_greedy(graphm)
membership(vism_comm)
modularity(vism_comm)
nodes$group <- membership(vism_comm)
#filter male and female
#
vis_graph <- visNetwork(nodes, edges, width = 1600, height = 900) %>% visPhysics(enabled = FALSE) %>%
visNodes(size = 8, font = c(size = 8)) %>% visEdges(color = c(opacity = 0.2))
vis_graph
