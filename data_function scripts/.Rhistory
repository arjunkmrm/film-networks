label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(paste(gender, term1, term2, sep = '-')) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) +
annotate('text', label = label1, x = 1950, y = 60, parse = TRUE) +
annotate('text', label = label2, x = 1950, y = 55, parse = TRUE)
#facet_wrap(~ gender)
#panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3)
}
plot_word('kill/verb', 'attempts/verb', 'male')
ggsave("kill_attempts.png", width = 6, height = 4)
plot_word('agent/noun', 'government/noun', 'male')
plot_word <- function(term1, term2, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term1) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll1'
male_ind = male_temp
male_temp = grapher(term1, 10, token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_temp <- male_temp %>% filter(names == term2) #filter term given
names(male_temp)[2] = 'll2'
male_temp$names = ifelse(is.na(male_temp$names), 'term2', male_temp$names)
male_ind = cbind(male_temp, male_ind)
male = rbind(male, male_ind)
# #same for females
# j = 1940 + 10*i
# female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
# female_ind$rank = 1 : nrow(female_ind)
# female_ind <- female_ind %>% filter(names == term)
# female_ind$year = j
# female_ind$gender = "female"
#bind to overall data
#all_ind <- ifelse(gender == 'male', rbind(all_ind, male_ind),
#       rbind(all_ind, male_ind))
}
male$ll = male$ll1 + male$ll2
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
label1
label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(paste(gender, term1, term2, sep = '-')) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) +
annotate('text', label = label1, x = 1950, y = 25, parse = TRUE) +
annotate('text', label = label2, x = 1950, y = 20, parse = TRUE)
#facet_wrap(~ gender)
#panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3)
}
plot_word('agent/noun', 'government/noun', 'male')
plot_word <- function(term1, term2, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term1) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll1'
male_ind = male_temp
male_temp = grapher(term1, 10, token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_temp <- male_temp %>% filter(names == term2) #filter term given
names(male_temp)[2] = 'll2'
male_temp$names = ifelse(is.na(male_temp$names), 'term2', male_temp$names)
male_ind = cbind(male_temp, male_ind)
male = rbind(male, male_ind)
# #same for females
# j = 1940 + 10*i
# female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
# female_ind$rank = 1 : nrow(female_ind)
# female_ind <- female_ind %>% filter(names == term)
# female_ind$year = j
# female_ind$gender = "female"
#bind to overall data
#all_ind <- ifelse(gender == 'male', rbind(all_ind, male_ind),
#       rbind(all_ind, male_ind))
}
male$ll = male$ll1 + male$ll2
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
label1
label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(paste(gender, term1, term2, sep = '-')) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) +
annotate('text', label = label1, x = 1950, y = 25, parse = TRUE) +
annotate('text', label = label2, x = 1950, y = 15, parse = TRUE)
#facet_wrap(~ gender)
#panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3)
}
plot_word('agent/noun', 'government/noun', 'male')
ggsave("agent_government.png", width = 6, height = 4)
plot_word('partner/noun', 'crime/noun', 'male')
plot_word('love/noun', 'fell/verb', 'female')
plot_word('love/noun', 'fell/verb', 'female')
gender = 'female'
plot_word('love/noun', 'fall/verb', 'female')
plot_word <- function(term1, term2, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term1) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll1'
male_ind = male_temp
male_temp = grapher(term1, 10, token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_temp <- male_temp %>% filter(names == term2) #filter term given
names(male_temp)[2] = 'll2'
male_temp$names = ifelse(is.na(male_temp$names), 'term2', male_temp$names)
male_ind = cbind(male_temp, male_ind)
male = rbind(male, male_ind)
# #same for females
# j = 1940 + 10*i
# female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
# female_ind$rank = 1 : nrow(female_ind)
# female_ind <- female_ind %>% filter(names == term)
# female_ind$year = j
# female_ind$gender = "female"
#bind to overall data
#all_ind <- ifelse(gender == 'male', rbind(all_ind, male_ind),
#       rbind(all_ind, male_ind))
}
male$ll = male$ll1 + male$ll2
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
label1
label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(paste(gender, term1, term2, sep = '-')) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) +
annotate('text', label = label1, x = 1950, y = 200, parse = TRUE) +
annotate('text', label = label2, x = 1950, y = 150, parse = TRUE)
#facet_wrap(~ gender)
#panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3)
}
plot_word('love/noun', 'fall/verb', 'female')
ggsave("love_fall.png", width = 6, height = 4)
plot_word('marriage/noun', 'proposal/noun', 'female')
plot_word('marry/verb', 'intends/verb', 'female')
gender = 'female'
term1 = 'marriage/proposal'
term1 = 'marriage/noun'
term2 = 'proposal/noun'
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term1) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll1'
male_ind = male_temp
male_temp = grapher(term1, 10, token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_temp <- male_temp %>% filter(names == term2) #filter term given
names(male_temp)[2] = 'll2'
male_temp$names = ifelse(is.na(male_temp$names), 'term2', male_temp$names)
male_ind = cbind(male_temp, male_ind)
male = rbind(male, male_ind)
# #same for females
# j = 1940 + 10*i
# female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
# female_ind$rank = 1 : nrow(female_ind)
# female_ind <- female_ind %>% filter(names == term)
# female_ind$year = j
# female_ind$gender = "female"
#bind to overall data
#all_ind <- ifelse(gender == 'male', rbind(all_ind, male_ind),
#       rbind(all_ind, male_ind))
}
plot_word('wedding/noun', 'reception/noun', 'female')
plot_word('wife/noun', 'children/noun', 'female')
plot_word <- function(term1, term2, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term1) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll1'
male_ind = male_temp
male_temp = grapher(term1, 10, token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
male_temp <- male_temp %>% filter(names == term2) #filter term given
names(male_temp)[2] = 'll2'
male_temp$names = ifelse(is.na(male_temp$names), 'term2', male_temp$names)
male_ind = cbind(male_temp, male_ind)
male = rbind(male, male_ind)
# #same for females
# j = 1940 + 10*i
# female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "LOGLIK")[[3]][]
# female_ind$rank = 1 : nrow(female_ind)
# female_ind <- female_ind %>% filter(names == term)
# female_ind$year = j
# female_ind$gender = "female"
#bind to overall data
#all_ind <- ifelse(gender == 'male', rbind(all_ind, male_ind),
#       rbind(all_ind, male_ind))
}
male$ll = male$ll1 + male$ll2
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
label1
label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(paste(gender, term1, term2, sep = '-')) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) +
annotate('text', label = label1, x = 1950, y = 190, parse = TRUE) +
annotate('text', label = label2, x = 1950, y = 175, parse = TRUE)
#facet_wrap(~ gender)
#panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3)
}
plot_word('wife/noun', 'children/noun', 'female')
ggsave("wife_children.png", width = 6, height = 4)
graph = grapherdemo(21, token_filter3('all', 1940, 1950, token.all)) #create graph
#graph = grapher('male/characters', 21, token.all)
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #%>% visNodes(font = list(size = 26))  #display
#Top secondary co-occurences
#male
dmat = distances(g, v='male/characters', to='beach/noun', weights = NA) #compute path weights
male_c = dmat['male/characters', ] #secondary to male
male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
female_c = fmat[, 'female/characters'] #secondary to male
female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#######function to return top most significant tropes################################
#find shortest paths in unweighted graph to all grey nodes
#find grey nodes
top_tropes <- function(gender = 'male/characters'){
all_secondary = V(g)$name[!V(g)$name %in% c(names(male_primary), names(female_primary))]
all_secondary = all_secondary[!all_secondary %in% c('male/characters', 'female/characters')]
filter =  ifelse(gender == 'male/characters', 'female/characters', 'male/characters')
#find all shortest paths
a = shortest_paths(
g,
from = gender,
to = all_secondary,
weights = NA
)
l = data.frame()
#filter paths that go through females
for(i in 1:length(a$vpath)){
l_temp = data.frame(start = (a$vpath[[i]]$name)[1], mid = (a$vpath[[i]]$name)[2], end = (a$vpath[[i]]$name)[3])
l = rbind(l, l_temp)
}
l = l %>% filter(mid != filter)
#find weights of all these paths
for(i in 1:nrow(l)){
l[i, 4] = sum(E(g, path = c(l[i,1], l[i,2], l[i,3]))$weight)
}
#head(l)
l = arrange(l, desc(V4))
l <- distinct(l)
return(l)
}
top_male = top_tropes('male/characters')
top_female = top_tropes('female/characters')
top_male <- top_male %>% filter(mid %in% names(male_primary))
top_female <- top_female %>% filter(mid %in% names(female_primary))
top_male <- top_male %>% group_by(mid) %>% slice(which.max(V4))
top_female <- top_female %>% group_by(mid) %>% slice(which.max(V4))
top_male <- arrange(top_male, desc(V4))
top_female <- arrange(top_female, desc(V4))[1:20,]
####### stacked bar plot of paths ######################
top_male$path = paste(top_male$start, top_male$mid, top_male$end, sep = '--')
names(top_male)[4] = 'llr'
top_female$path = paste(top_female$start, top_female$mid, top_female$end, sep = '--')
names(top_female)[4] = 'llr'
mtt = ggplot(top_male, aes(x = reorder(path, llr), y = llr)) +
geom_bar(stat = 'identity', fill = 'deepskyblue4',
alpha = 0.7, color = 'black', width = 0.8) + coord_flip() +
xlab('word') + ylab('loglikelihood ratio') + theme_linedraw() +
ggtitle('Male')
ftt = ggplot(top_female, aes(x = reorder(path, -llr), y = llr)) +
geom_bar(stat = 'identity', fill = 'darkorange3',
alpha = 0.7, color = 'black', width = 0.8) + coord_flip() +
xlab('word') + ylab('loglikelihood ratio') + theme_linedraw() +
ggtitle('Female')
mtt
####################################### Network
#COLORING THESE EDGES
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
head(all_edges)
all_edges$V3 = paste(all_edges$V1, all_edges$V2, sep='-')
head(all_edges)
top_male$sec <- paste(top_male$mid, top_male$end, sep='-')
top_male$pri <- paste(top_male$start, top_male$mid, sep='-')
top_female$sec <- paste(top_female$mid, top_female$end, sep='-')
top_female$pri <- paste(top_female$start, top_female$mid, sep='-')
all_top = rbind(top_male, top_female)
edge.start <- ends(g, es = E(g), names = F)[,1]
E(g)$color <-  ifelse(all_edges$V3 %in% c(top_female$pri, 'wife/noun-female/characters', 'girlfriend/noun-female/characters', 'named/verb-female/characters', 'meets/verb-female/characters'),
adjustcolor('orange', alpha=0.8),
ifelse(all_edges$V3 %in% top_male$pri,
adjustcolor('cornflowerblue', alpha=0.8),
ifelse(all_edges$V3 %in% all_top$sec,
V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4))))
visIgraph(g)
all_edges$V3[all_edges$V3 == 'wife/noun-female/characters']
top_male <- top_male[1:10,]
top_female <- top_female[1:10,]
all_top <- rbind(top_male, top_female)
to_trim <- V(g)$name[!V(g)$name %in% c(all_top$end, 'male/characters', 'female/characters', all_top$mid)]
g_trim = g - to_trim
visIgraph(g_trim) %>% visNodes(font = list(size = 28))
graph = grapherdemo(21, token_filter3('all', 2010, 2020, token.all)) #create graph
#graph = grapher('male/characters', 21, token.all)
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #%>% visNodes(font = list(size = 26))  #display
#Top secondary co-occurences
#male
dmat = distances(g, v='male/characters', to='beach/noun', weights = NA) #compute path weights
male_c = dmat['male/characters', ] #secondary to male
male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
female_c = fmat[, 'female/characters'] #secondary to male
female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#######function to return top most significant tropes################################
#find shortest paths in unweighted graph to all grey nodes
#find grey nodes
top_tropes <- function(gender = 'male/characters'){
all_secondary = V(g)$name[!V(g)$name %in% c(names(male_primary), names(female_primary))]
all_secondary = all_secondary[!all_secondary %in% c('male/characters', 'female/characters')]
filter =  ifelse(gender == 'male/characters', 'female/characters', 'male/characters')
#find all shortest paths
a = shortest_paths(
g,
from = gender,
to = all_secondary,
weights = NA
)
l = data.frame()
#filter paths that go through females
for(i in 1:length(a$vpath)){
l_temp = data.frame(start = (a$vpath[[i]]$name)[1], mid = (a$vpath[[i]]$name)[2], end = (a$vpath[[i]]$name)[3])
l = rbind(l, l_temp)
}
l = l %>% filter(mid != filter)
#find weights of all these paths
for(i in 1:nrow(l)){
l[i, 4] = sum(E(g, path = c(l[i,1], l[i,2], l[i,3]))$weight)
}
#head(l)
l = arrange(l, desc(V4))
l <- distinct(l)
return(l)
}
top_male = top_tropes('male/characters')
top_female = top_tropes('female/characters')
top_male <- top_male %>% filter(mid %in% names(male_primary))
top_female <- top_female %>% filter(mid %in% names(female_primary))
top_male <- top_male %>% group_by(mid) %>% slice(which.max(V4))
top_female <- top_female %>% group_by(mid) %>% slice(which.max(V4))
top_male <- arrange(top_male, desc(V4))
top_female <- arrange(top_female, desc(V4))[1:20,]
####### stacked bar plot of paths ######################
top_male$path = paste(top_male$start, top_male$mid, top_male$end, sep = '--')
names(top_male)[4] = 'llr'
top_female$path = paste(top_female$start, top_female$mid, top_female$end, sep = '--')
names(top_female)[4] = 'llr'
mtt = ggplot(top_male, aes(x = reorder(path, llr), y = llr)) +
geom_bar(stat = 'identity', fill = 'deepskyblue4',
alpha = 0.7, color = 'black', width = 0.8) + coord_flip() +
xlab('word') + ylab('loglikelihood ratio') + theme_linedraw() +
ggtitle('Male')
ftt = ggplot(top_female, aes(x = reorder(path, -llr), y = llr)) +
geom_bar(stat = 'identity', fill = 'darkorange3',
alpha = 0.7, color = 'black', width = 0.8) + coord_flip() +
xlab('word') + ylab('loglikelihood ratio') + theme_linedraw() +
ggtitle('Female')
mtt
####################################### Network
#COLORING THESE EDGES
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
head(all_edges)
all_edges$V3 = paste(all_edges$V1, all_edges$V2, sep='-')
head(all_edges)
top_male$sec <- paste(top_male$mid, top_male$end, sep='-')
top_male$pri <- paste(top_male$start, top_male$mid, sep='-')
top_female$sec <- paste(top_female$mid, top_female$end, sep='-')
top_female$pri <- paste(top_female$start, top_female$mid, sep='-')
all_top = rbind(top_male, top_female)
edge.start <- ends(g, es = E(g), names = F)[,1]
E(g)$color <-  ifelse(all_edges$V3 %in% c(top_female$pri, 'wife/noun-female/characters', 'girlfriend/noun-female/characters', 'named/verb-female/characters', 'meets/verb-female/characters'),
adjustcolor('orange', alpha=0.8),
ifelse(all_edges$V3 %in% top_male$pri,
adjustcolor('cornflowerblue', alpha=0.8),
ifelse(all_edges$V3 %in% all_top$sec,
V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4))))
visIgraph(g)
all_edges$V3[all_edges$V3 == 'wife/noun-female/characters']
top_male <- top_male[1:10,]
top_female <- top_female[1:10,]
all_top <- rbind(top_male, top_female)
to_trim <- V(g)$name[!V(g)$name %in% c(all_top$end, 'male/characters', 'female/characters', all_top$mid)]
g_trim = g - to_trim
visIgraph(g_trim) %>% visNodes(font = list(size = 28))
visIgraph(g)
male_primary
female_primary
plot_word('relationship/noun', 'sexual/adj', 'female')
source('grapherdemo.R')
graph = grapherdemo(11, token_filter3('noun', 2010, 2020, token.all)) #create graph
#graph = grapher('male/characters', 21, token.all)
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #%>% visNodes(font = list(size = 26))  #display
female_primary
male_primary
graph = grapherdemo(11, token_filter3('noun', 1940, 2020, token.all)) #create graph
#graph = grapher('male/characters', 21, token.all)
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
female_primary
male_primary
visIgraph(g) #%>% visNodes(font = list(size = 26))  #display
g = graph[[1]] #save graph as g
visIgraph(g) #%>% visNodes(font = list(size = 26))  #display
visIgraph(g) #%>% visNodes(font = list(size = 26))  #display
graph = grapherdemo(11, token_filter3('verb', 1940, 2020, token.all)) #create graph
#graph = grapher('male/characters', 21, token.all)
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #%>% visNodes(font = list(size = 26))  #display
graph = grapherdemo(10, token_filter3('verb', 1940, 2020, token.all)) #create graph
#graph = grapher('male/characters', 21, token.all)
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #%>% visNodes(font = list(size = 26))  #display
#graph = grapher('male/characters', 21, token.all)
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
female_primary
male_primary
