E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],
ifelse(malet_bool == TRUE, V(g)$color[edge.start],
ifelse(femalet_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))))
V(g)$color <- ifelse(V(g)$name == c('male/characters'), adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% c('female/characters'), adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(intersect(mprimary_tropes, fprimary_tropes)), adjustcolor('purple', alpha = 0.9),
ifelse(V(g)$name %in% mprimary_tropes, adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% fprimary_tropes, adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(names(male_c), names(female_c)), adjustcolor('darkgrey', alpha = 0.9),
adjustcolor('grey', alpha = 0.2)))))))
#V(g)$color <- when(V(g)$name %in% 'male/character', adjustcolor('red', alpha = 0.8))
visIgraph(g)
keep_nodes = names(c(allc, male_primary, female_primary))
keep_nodes = c(keep_nodes, 'male/characters', 'female/characters')
remove_nodes = names(V(g))[!names(V(g)) %in% keep_nodes]
g_trim <- g - remove_nodes
visIgraph(g_trim) %>% visNodes(font = list(size = 26))
graph = grapherdemo(20, token_filter3('adj', 1940, 1970, token.all))
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #display
#male
dmat = distances(graph[[1]], v=V(graph[[1]]), to='male/characters') #compute path weights
male_c = dmat[, 'male/characters'] #secondary to male
male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
female_c = fmat[, 'female/characters'] #secondary to male
female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#edge colors
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges)
all_edges = as.data.frame(all_edges) #convert to dataframe
all_edges[all_edges$V1 == 'female/characters']
all_edges$V1[all_edges$V1 == 'female/characters']
all_edges$V2[all_edges$V1 == 'female/characters']
visIgraph(g) #display
E(g)$color <-  ifelse(male.sec_bool == TRUE, V(g)$color[edge.start], adjustcolor('grey', alpha=0.4))
#male_c = male_c[names(male_c != 'beach/noun')]
male.sec_bool <- all_edges$V2 %in% names(male_c)  #create bool of all male secondary co-oocs
female.sec_bool <- all_edges$V2 %in% names(female_c)  #create bool of all female secondary co-oocs
visIgraph(g) #display
edge.start <- ends(g, es = E(g), names = F)[,1]
E(g)$color <-  ifelse(male.sec_bool == TRUE, V(g)$color[edge.start], adjustcolor('grey', alpha=0.4))
visIgraph(g) #display
edge.start <- ends(g, es = E(g), names = F)[,1]
E(g)$color <-  ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))
visIgraph(g) #display
(female.sec_bool & male.sec_bool)
(female.sec_bool | male.sec_bool)
(female.sec_bool & male.sec_bool)
source('grapherdemo.R')
graph = grapherdemo(20, token_filter3('adj', 1940, 1970, token.all)) #create graph
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #display
#Top secondary co-occurences
#male
dmat = distances(graph[[1]], v=V(graph[[1]]), to='male/characters') #compute path weights
male_c = dmat[, 'male/characters'] #secondary to male
male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
female_c = fmat[, 'female/characters'] #secondary to male
female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#store all secondary
allc = c(male_c, female_c)
allc = sort(allc, decreasing = T) #sort decreasing
#why?
mandf = intersect(names(female_c), names(male_c))
allc[names(allc) %in% mandf]
male_only = names(male_c[!names(male_c) %in% mandf])
female_only = names(female_c[!names(female_c) %in% mandf])
#edge colors
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
#check
all_edges$V2[all_edges$V1 == 'female/characters']
#male_c = male_c[names(male_c != 'beach/noun')]
male.sec_bool <- all_edges$V2 %in% names(male_c)  #create bool of all male secondary co-oocs
female.sec_bool <- all_edges$V2 %in% names(female_c)  #create bool of all female secondary co-oocs
#color only male.sec and female.sec edges based on the start edge color
edge.start <- ends(g, es = E(g), names = F)[,1]
E(g)$color <-  ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))
visIgraph(g) #display
graph = grapherdemo(20, token_filter3('adj', 1940, 1970, token.all)) #create graph
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #display
#Top secondary co-occurences
#male
dmat = distances(graph[[1]], v=V(graph[[1]]), to='male/characters') #compute path weights
male_c = dmat[, 'male/characters'] #secondary to male
male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
female_c = fmat[, 'female/characters'] #secondary to male
female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#store all secondary
allc = c(male_c, female_c)
allc = sort(allc, decreasing = T) #sort decreasing
#why?
mandf = intersect(names(female_c), names(male_c))
allc[names(allc) %in% mandf]
male_only = names(male_c[!names(male_c) %in% mandf])
female_only = names(female_c[!names(female_c) %in% mandf])
#edge colors
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
#check
all_edges$V2[all_edges$V1 == 'female/characters']
#male_c = male_c[names(male_c != 'beach/noun')]
male.sec_bool <- all_edges$V2 %in% names(male_c)  #create bool of all male secondary co-oocs
female.sec_bool <- all_edges$V2 %in% names(female_c)  #create bool of all female secondary co-oocs
# E(g)$color <- ifelse(malet_bool == TRUE, adjustcolor('cornflowerblue'),
#                      ifelse(femalet_bool == TRUE, adjustcolor('orange'),
#                             'grey'))
visIgraph(g) #display
#color only male.sec and female.sec edges based on the start edge color
edge.start <- ends(g, es = E(g), names = F)[,1]
mprimary_tropes = male_primary
m_pcolor = paste('male/characters', mprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
mp_bool = all_edges$V3 %in% m_pcolor
fprimary_tropes = female_primary
f_pcolor = paste('female/characters', fprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
all_edges$V1[all_edges$V2 == 'tells/verb']
fp_bool = all_edges$V3 %in% f_pcolor
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],
ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))))
visIgraph(g)
E(g)$color <-  adjustcolor('grey', alpha=0.4)
visIgraph(g)
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],  adjustcolor('grey', alpha=0.4)))
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],  adjustcolor('grey', alpha=0.4)))
visIgraph(g)
V(g)$color[edge.start]
E(g)$color <-  adjustcolor('grey', alpha=0.9)
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],  adjustcolor('grey', alpha=0.4)))
visIgraph(g)
fp_bool
fprimary_tropes = female_primary
fprimary_tropes
f_pcolor = paste('female/characters', fprimary_tropes)
f_pcolor
fprimary_tropes
fprimary_tropes
fprimary_tropes = names(female_primary)
f_pcolor = paste('female/characters', fprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
all_edges$V1[all_edges$V2 == 'tells/verb']
fp_bool = all_edges$V3 %in% f_pcolor
f_pcolor
all_edges
all_edges$V1[all_edges$V2 == 'tells/verb']
fp_bool = all_edges$V3 %in% f_pcolor
fp_bool
mprimary_tropes = names(male_primary)
m_pcolor = paste('male/characters', mprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
mp_bool = all_edges$V3 %in% m_pcolor
mp_bool
E(g)$color <-  adjustcolor('grey', alpha=0.9)
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],  adjustcolor('grey', alpha=0.4)))
visIgraph(g)
male.sec_bool
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],
ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))))
visIgraph(g)
mprimary_tropes = mprimary_tropes[mprimary_tropes != 'female/characters']
m_pcolor = paste('male/characters', mprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
mp_bool = all_edges$V3 %in% m_pcolor
#fprimary_tropes = c('love/noun', 'marriage/noun', 'relationship/noun',
'tells/verb')
fprimary_tropes = names(female_primary)
f_pcolor = paste('female/characters', fprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
all_edges$V1[all_edges$V2 == 'tells/verb']
fp_bool = all_edges$V3 %in% f_pcolor
E(g)$color <-  adjustcolor('grey', alpha=0.9)
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],
ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))))
visIgraph(g)
V(g)$color <- ifelse(V(g)$name == c('male/characters'), adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% c('female/characters'), adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(intersect(mprimary_tropes, fprimary_tropes)), adjustcolor('purple', alpha = 0.9),
ifelse(V(g)$name %in% mprimary_tropes, adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% fprimary_tropes, adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(names(male_c), names(female_c)), adjustcolor('darkgrey', alpha = 0.9),
adjustcolor('grey', alpha = 0.2)))))))
#V(g)$color <- when(V(g)$name %in% 'male/character', adjustcolor('red', alpha = 0.8))
visIgraph(g)
all_edges$V1[male.sec_bool]
all_edges$V1[female.sec_bool]
names(male_primary])
names(male_primary)
all_edges$V1[[all_edges$V1[male.sec_bool] %in% names(male_primary)]
all_edges$V1[female.sec_bool]
#color only primary tropes that have a path
#mprimary_tropes = c('is/verb', 'friend/noun', 'takes/verb', 'tells/verb',
'kill/verb', 'agent/noun', 'help/noun',
'brother/noun', 'former/adj')
mprimary_tropes = names(male_primary)
mprimary_tropes = mprimary_tropes[mprimary_tropes != 'female/characters']
m_pcolor = paste('male/characters', mprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
mp_bool = all_edges$V3 %in% m_pcolor
#fprimary_tropes = c('love/noun', 'marriage/noun', 'relationship/noun',
'tells/verb')
fprimary_tropes = names(female_primary)
f_pcolor = paste('female/characters', fprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
all_edges$V1[all_edges$V2 == 'tells/verb']
fp_bool = all_edges$V3 %in% f_pcolor
E(g)$color <-  adjustcolor('grey', alpha=0.9)
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],
ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))))
visIgraph(g)
all_edges$V3[malet_bool]
V(g)$color <- ifelse(V(g)$name == c('male/characters'), adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% c('female/characters'), adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(intersect(mprimary_tropes, fprimary_tropes)), adjustcolor('purple', alpha = 0.9),
ifelse(V(g)$name %in% mprimary_tropes, adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% fprimary_tropes, adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(names(male_c), names(female_c)), adjustcolor('darkgrey', alpha = 0.9),
adjustcolor('grey', alpha = 0.2)))))))
#V(g)$color <- when(V(g)$name %in% 'male/character', adjustcolor('red', alpha = 0.8))
visIgraph(g)
keep_nodes = names(c(allc, male_primary, female_primary))
keep_nodes = c(keep_nodes, 'male/characters', 'female/characters')
remove_nodes = names(V(g))[!names(V(g)) %in% keep_nodes]
g_trim <- g - remove_nodes
visIgraph(g_trim) %>% visNodes(font = list(size = 26))
#ignore
### Uni
source('grapher.r')
token.test = token.all %>% tokens_remove('female/characters')
graph = grapher('male/characters', 20, token_filter3("all", 1940, 1950, token.test))
graph_plot = visIgraph(graph[[1]]) %>% visNodes(font = list(size = 28))
g = graph[[1]]
fem_rem = names(ego(g, order = 2, 'female/characters')[[1]])
mem = names(ego(g, order = 2, 'male/characters')[[1]])
mem = mem[mem != 'female/characters']
fem_rem = fem_rem[!fem_rem %in% mem]
g = g - fem_rem
visIgraph(g)
V(g)$color <- ifelse(V(g)$name == 'twin/adj', 'red', 'grey')
all_edges$V1[all_edges$V1[male.sec_bool] %in% names(male_primary)]
all_edges$V1[male.sec_bool] %in% names(male_primary)
all_edges$V1[male.sec_bool]
names(male_primary) %in% all_edges$V1[male.sec_bool]
all_edges$V1[male.sec_bool]
all_edges$V1[male.sec_bool] %in% names(male_primary)
all_edges$V1[all_edges$V1[male.sec_bool] %in% names(male_primary)]
unique(all_edges$V1[all_edges$V1[male.sec_bool] %in% names(male_primary)])
all_edges$V1[male.sec_bool]
male.sec_bool
intersect(all_edges$V1[male.sec_bool], names(male_primary))
male_ps = intersect(all_edges$V1[male.sec_bool], names(male_primary))
female_ps = intersect(all_edges$V1[female.sec_bool], names(female_primary))
female_ps
graph = grapherdemo(20, token_filter3('all', 1940, 1970, token.all)) #create graph
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #display
#Top secondary co-occurences
#male
dmat = distances(graph[[1]], v=V(graph[[1]]), to='male/characters') #compute path weights
male_c = dmat[, 'male/characters'] #secondary to male
male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
female_c = fmat[, 'female/characters'] #secondary to male
female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#store all secondary
allc = c(male_c, female_c)
allc = sort(allc, decreasing = T) #sort decreasing
#why?
mandf = intersect(names(female_c), names(male_c))
allc[names(allc) %in% mandf]
male_only = names(male_c[!names(male_c) %in% mandf])
female_only = names(female_c[!names(female_c) %in% mandf])
#edge colors
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
#check
all_edges$V2[all_edges$V1 == 'female/characters']
#male_c = male_c[names(male_c != 'beach/noun')]
male.sec_bool <- all_edges$V2 %in% names(male_c)  #create bool of all male secondary co-oocs
female.sec_bool <- all_edges$V2 %in% names(female_c)  #create bool of all female secondary co-oocs
# E(g)$color <- ifelse(malet_bool == TRUE, adjustcolor('cornflowerblue'),
#                      ifelse(femalet_bool == TRUE, adjustcolor('orange'),
#                             'grey'))
visIgraph(g) #display
#color only male.sec and female.sec edges based on the start edge color
edge.start <- ends(g, es = E(g), names = F)[,1]
male_ps = intersect(all_edges$V1[male.sec_bool], names(male_primary))
female_ps = intersect(all_edges$V1[female.sec_bool], names(female_primary))
all_edges$V1[female.sec_bool]
mprimary_tropes = male_ps
mprimary_tropes = mprimary_tropes[mprimary_tropes != 'female/characters']
m_pcolor = paste('male/characters', mprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
mp_bool = all_edges$V3 %in% m_pcolor
#fprimary_tropes = c('love/noun', 'marriage/noun', 'relationship/noun',
'tells/verb')
fprimary_tropes = female_ps
f_pcolor = paste('female/characters', fprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
all_edges$V1[all_edges$V2 == 'tells/verb']
fp_bool = all_edges$V3 %in% f_pcolor
E(g)$color <-  adjustcolor('grey', alpha=0.9)
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],
ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))))
visIgraph(g)
all_edges$V3[malet_bool]
V(g)$color <- ifelse(V(g)$name == c('male/characters'), adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% c('female/characters'), adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(intersect(mprimary_tropes, fprimary_tropes)), adjustcolor('purple', alpha = 0.9),
ifelse(V(g)$name %in% mprimary_tropes, adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% fprimary_tropes, adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(names(male_c), names(female_c)), adjustcolor('darkgrey', alpha = 0.9),
adjustcolor('grey', alpha = 0.2)))))))
#V(g)$color <- when(V(g)$name %in% 'male/character', adjustcolor('red', alpha = 0.8))
visIgraph(g)
keep_nodes = names(c(allc, male_primary, female_primary))
keep_nodes = c(keep_nodes, 'male/characters', 'female/characters')
remove_nodes = names(V(g))[!names(V(g)) %in% keep_nodes]
g_trim <- g - remove_nodes
visIgraph(g_trim) %>% visNodes(font = list(size = 26))
source('grapherdemo.R')
graph = grapherdemo(20, token_filter3('all', 1990, 2020, token.all)) #create graph
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #display
#Top secondary co-occurences
#male
dmat = distances(graph[[1]], v=V(graph[[1]]), to='male/characters') #compute path weights
male_c = dmat[, 'male/characters'] #secondary to male
male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
female_c = fmat[, 'female/characters'] #secondary to male
female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#store all secondary
allc = c(male_c, female_c)
allc = sort(allc, decreasing = T) #sort decreasing
#why?
mandf = intersect(names(female_c), names(male_c))
allc[names(allc) %in% mandf]
male_only = names(male_c[!names(male_c) %in% mandf])
female_only = names(female_c[!names(female_c) %in% mandf])
#edge colors
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
#check
all_edges$V2[all_edges$V1 == 'female/characters']
#male_c = male_c[names(male_c != 'beach/noun')]
male.sec_bool <- all_edges$V2 %in% names(male_c)  #create bool of all male secondary co-oocs
female.sec_bool <- all_edges$V2 %in% names(female_c)  #create bool of all female secondary co-oocs
# E(g)$color <- ifelse(malet_bool == TRUE, adjustcolor('cornflowerblue'),
#                      ifelse(femalet_bool == TRUE, adjustcolor('orange'),
#                             'grey'))
visIgraph(g) #display
#color only male.sec and female.sec edges based on the start edge color
edge.start <- ends(g, es = E(g), names = F)[,1]
male_ps = intersect(all_edges$V1[male.sec_bool], names(male_primary))
female_ps = intersect(all_edges$V1[female.sec_bool], names(female_primary))
all_edges$V1[female.sec_bool]
mprimary_tropes = male_ps
mprimary_tropes = mprimary_tropes[mprimary_tropes != 'female/characters']
m_pcolor = paste('male/characters', mprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
mp_bool = all_edges$V3 %in% m_pcolor
#fprimary_tropes = c('love/noun', 'marriage/noun', 'relationship/noun',
'tells/verb')
fprimary_tropes = female_ps
f_pcolor = paste('female/characters', fprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
all_edges$V1[all_edges$V2 == 'tells/verb']
fp_bool = all_edges$V3 %in% f_pcolor
E(g)$color <-  adjustcolor('grey', alpha=0.9)
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],
ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))))
visIgraph(g)
all_edges$V3[malet_bool]
V(g)$color <- ifelse(V(g)$name == c('male/characters'), adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% c('female/characters'), adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(intersect(mprimary_tropes, fprimary_tropes)), adjustcolor('purple', alpha = 0.9),
ifelse(V(g)$name %in% mprimary_tropes, adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% fprimary_tropes, adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(names(male_c), names(female_c)), adjustcolor('darkgrey', alpha = 0.9),
adjustcolor('grey', alpha = 0.2)))))))
#V(g)$color <- when(V(g)$name %in% 'male/character', adjustcolor('red', alpha = 0.8))
visIgraph(g)
keep_nodes = names(c(allc, male_primary, female_primary))
keep_nodes = c(keep_nodes, 'male/characters', 'female/characters')
remove_nodes = names(V(g))[!names(V(g)) %in% keep_nodes]
g_trim <- g - remove_nodes
visIgraph(g_trim) %>% visNodes(font = list(size = 26))
graph = grapherdemo(20, token_filter3('all', 1940, 1950, token.all)) #create graph
female_primary = graph[[2]] #20 female primary nodes
male_primary = graph[[3]] #20 male primary nodes
g = graph[[1]] #save graph as g
visIgraph(g) #display
#Top secondary co-occurences
#male
dmat = distances(graph[[1]], v=V(graph[[1]]), to='male/characters') #compute path weights
male_c = dmat[, 'male/characters'] #secondary to male
male_c = sort(male_c, decreasing = T)[1:20] #sort top 20
#female
fmat = distances(graph[[1]], v=V(graph[[1]]), to='female/characters') #compute path weights
female_c = fmat[, 'female/characters'] #secondary to male
female_c = sort(female_c, decreasing = T)[1:20] #sort top 20
#store all secondary
allc = c(male_c, female_c)
allc = sort(allc, decreasing = T) #sort decreasing
#why?
mandf = intersect(names(female_c), names(male_c))
allc[names(allc) %in% mandf]
male_only = names(male_c[!names(male_c) %in% mandf])
female_only = names(female_c[!names(female_c) %in% mandf])
#edge colors
all_edges = ends(g, es = E(g), names = T) #store all edges
all_edges = as.data.frame(all_edges) #convert to dataframe
#check
all_edges$V2[all_edges$V1 == 'female/characters']
#male_c = male_c[names(male_c != 'beach/noun')]
male.sec_bool <- all_edges$V2 %in% names(male_c)  #create bool of all male secondary co-oocs
female.sec_bool <- all_edges$V2 %in% names(female_c)  #create bool of all female secondary co-oocs
# E(g)$color <- ifelse(malet_bool == TRUE, adjustcolor('cornflowerblue'),
#                      ifelse(femalet_bool == TRUE, adjustcolor('orange'),
#                             'grey'))
visIgraph(g) #display
#color only male.sec and female.sec edges based on the start edge color
edge.start <- ends(g, es = E(g), names = F)[,1]
male_ps = intersect(all_edges$V1[male.sec_bool], names(male_primary))
female_ps = intersect(all_edges$V1[female.sec_bool], names(female_primary))
all_edges$V1[female.sec_bool]
#color only primary tropes that have a path
#mprimary_tropes = c('is/verb', 'friend/noun', 'takes/verb', 'tells/verb',
'kill/verb', 'agent/noun', 'help/noun',
'brother/noun', 'former/adj')
mprimary_tropes = male_ps
mprimary_tropes = mprimary_tropes[mprimary_tropes != 'female/characters']
m_pcolor = paste('male/characters', mprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
mp_bool = all_edges$V3 %in% m_pcolor
#fprimary_tropes = c('love/noun', 'marriage/noun', 'relationship/noun',
'tells/verb')
fprimary_tropes = female_ps
f_pcolor = paste('female/characters', fprimary_tropes)
all_edges$V3 = paste(all_edges$V1, all_edges$V2)
all_edges$V1[all_edges$V2 == 'tells/verb']
fp_bool = all_edges$V3 %in% f_pcolor
E(g)$color <-  adjustcolor('grey', alpha=0.9)
E(g)$color <-  ifelse(mp_bool == TRUE, V(g)$color[edge.start],
ifelse(fp_bool == TRUE, V(g)$color[edge.start],
ifelse(male.sec_bool == TRUE, V(g)$color[edge.start],
ifelse(female.sec_bool == TRUE, V(g)$color[edge.start],
adjustcolor('grey', alpha=0.4)))))
visIgraph(g)
all_edges$V3[malet_bool]
V(g)$color <- ifelse(V(g)$name == c('male/characters'), adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% c('female/characters'), adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(intersect(mprimary_tropes, fprimary_tropes)), adjustcolor('purple', alpha = 0.9),
ifelse(V(g)$name %in% mprimary_tropes, adjustcolor('cornflowerblue', alpha = 0.9),
ifelse(V(g)$name %in% fprimary_tropes, adjustcolor('orange', alpha = 0.9),
ifelse(V(g)$name %in% c(names(male_c), names(female_c)), adjustcolor('darkgrey', alpha = 0.9),
adjustcolor('grey', alpha = 0.2)))))))
#V(g)$color <- when(V(g)$name %in% 'male/character', adjustcolor('red', alpha = 0.8))
visIgraph(g)
keep_nodes = names(c(allc, male_primary, female_primary))
keep_nodes = c(keep_nodes, 'male/characters', 'female/characters')
remove_nodes = names(V(g))[!names(V(g)) %in% keep_nodes]
g_trim <- g - remove_nodes
visIgraph(g_trim) %>% visNodes(font = list(size = 26))
