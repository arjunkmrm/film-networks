print("hello")
setwd("~/Documents/GitHub/film_networks/data_function scripts")
#community detection from overall network
#remember to set working directory to 'data_function scripts' folder
library(tidyverse)
library(quanteda)
library(igraph) #for creating graphs
library(visNetwork) #for visualizing graphs
source("token_filter.R") #filter tokens
#load tokens, get it ready for analysis
load("token.all.RData")
#convert tokens to all lower
token.all <- tokens_tolower(token.all) #convert all tokens to lower
token.all = tokens_sample(token.all, size = 22638, replace = FALSE, prob = NULL, by = decade)
#gender = 'male'
#DETECTING COMMUNITIES
#toks.all = token.all
#gender = 'female'
detect_communities <- function(toks.all, gender = 'male', nn = 10){
toks <- toks.all %>%
tokens_select(pattern = paste(gender, '/characters', sep = ''), selection = 'remove', padding = TRUE, window = 5)
#filter to keep only words that occur at least 10 times
dfm <-  toks %>% dfm() %>% dfm_trim(min_termfreq = 10)
filtered = colnames(dfm)
toks <- token.all %>%
tokens_select(pattern = filtered, selection = 'keep', padding = TRUE)
#feature co-occurrence matrix for males
fcmat = fcm(toks, context = c("window"),
count = c("weighted"), #words are weighted within the window
window = 5)
#fcmat[1:2,1:2] #a small portion of the feature co-occurrence matrix
graph = graph_from_adjacency_matrix(fcmat, weighted = TRUE) #create graph from matrix
edgelist <- get.data.frame(graph)
edgelist_m <- as.matrix(edgelist[ ,c("from", "to")])
graph <- graph_from_edgelist(edgelist_m, directed = FALSE)
graph <- set.edge.attribute(graph, "weight", value = edgelist$weight)
graph = simplify(graph, remove.loops = TRUE) #remove self-looping edges
#louvian communities
louvain <- cluster_louvain(graph, weights = E(graph)$weights)#detect communities
graph$community <- louvain$membership
#unique(male_graph$community)
#most important word in each community
communities <- data.frame()
for (i in unique(graph$community)) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# get size of each subgraph
size <- igraph::gorder(subgraph)
# get betweenness centrality
btwn <-  igraph::betweenness(subgraph)
communities <- communities %>%
dplyr::bind_rows(
data.frame(community = i,
n_characters = size,
most_important = names(which(btwn == max(btwn)))
)
)
}
communities = arrange(communities, desc(n_characters))
top_comm <- communities$community[1:5]
print(communities)
#knitr::kable(communities %>%
#               dplyr::select(community, n_characters, most_important))
#top five in each community
top_ten <- data.frame()
n = 0
for (i in top_comm) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# for larger communities
#  if (igraph::gorder(subgraph) > 1055) {
n = n + 1
# get degree
degree <-  igraph::degree(subgraph)
# get top ten degrees
top <- names(head(sort(degree, decreasing = TRUE), nn))
result <- data.frame(community = i, rank = 1:nn, word = top)
# } else {
#   result <- data.frame(community = NULL, rank = NULL, character = NULL)
#}
top_ten <- top_ten %>%
dplyr::bind_rows(result)
}
print(top_ten)
write.csv(top_ten, paste(gender, '.csv', sep = ''))
print(paste('modularity =', modularity(louvain)))
n
# knitr::kable(
#   top_five %>%
#     tidyr::pivot_wider(names_from = rank, values_from = character)
# )
#Visualising the communities
subgraph <- induced_subgraph(graph, v = top_ten$word)
subgraph <- simplify(subgraph)
subgraph$community
nodes = data.frame(word = names(V(subgraph)))
group = rep(1:n, each = nn)
top_ten$group = group
clusters = inner_join(nodes, top_ten)
subgraph$community <- clusters$group
#unique(subgraph$community)
# give our nodes some properties, incl scaling them by degree and coloring them by community
V(subgraph)$size <- 5
V(subgraph)$frame.color <- "white"
V(subgraph)$color <- subgraph$community
#V(male_subgraph)$label <- V(male_subgraph)$name
V(subgraph)$label.cex <- 1.8
# also color edges according to their starting node
#edge.start <- ends(subgraph, es = E(subgraph), names = F)[,1]
#E(subgraph)$color <- V(subgraph)$color[edge.start]
#E(subgraph)$arrow.mode <- 0
# only label central characters
#v_labels <- which(V(friends_graph)$name %in% friends)
#for (i in 1:length(V(friends_graph))) {
#  if (!(i %in% v_labels)) {
#    V(friends_graph)$label[i] <- ""
#  }
#}
#l2 <- layout_with_mds(male_subgraph)
#layout <- layout_with_kk(male_subgraph, weights=weights)
#plot(graph, layout=layout)
#plot(male_subgraph, rescale = T, layout = l2, main = "Male Graph")
#length(V(male_subgraph))
#visIgraph(male_subgraph) %>% visIgraphLayout(layout = "layout_with_mds") %>% visNodes(size = 12)
#layout_in_circle
#"layout_with_mds"
#plot by groups
#make clusters first
clust_obj = make_clusters(subgraph, membership = clusters$group)
# weights <- ifelse(crossing(male_clust, male_subgraph), 1, 100)
# layout <- layout_with_kk(male_subgraph, weights=weights)
# plot(male_subgraph, layout=layout)
prettyColors <- c("turquoise4", "azure4", "olivedrab","deeppink4", "blue")
communityColors <- prettyColors[membership(clust_obj)]
edge.weights <- function(community, network, weight.within = 100, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
E(subgraph)$weight <- edge.weights(clust_obj, subgraph)
layout <- layout_with_fr(subgraph, weights=E(subgraph)$weight)
plot(subgraph, layout=layout, col = communityColors)
}
#load libraries
library(tidyverse)
library(quanteda) #for text cleaning
library(igraph) #for creating graphs
library(visNetwork) #for visualizing graphs
library(wordcloud) #for creating wordclouds
#load_functions
source("calculatecoocstats.R") #calculate co-occurrence statistics
source("grapher.R") #create graph
source("rawcounts.R") #find raw counts of co-occurrences
source("token_filter.R") #filter tokens
#load tokens, get it ready for analysis
load("token.all.RData")
#convert tokens to all lower
token.all <- tokens_tolower(token.all) #convert all tokens to lower
#sample based on min in a decade
token.all = tokens_sample(token.all, size = 22638, replace = FALSE, prob = NULL, by = decade)
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 50, token_filter2("all", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:20,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
gr.m[1:20,]
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 50, token_filter3("adj", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:20,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
gr.m[1:20,]
gr.m
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 50, token_filter3("adj", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:21,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
gr.m
#female
female.perm <- data.frame()
graph.f = grapher("female/characters", 25, token_filter2("all", 1940, 2010, token.all))
gr.f <- graph.f[[3]]
gr.f <- gr.f[gr.f$names != "male/characters",]
gr.f <- gr.f[1:21,]
gr.f$rank = 1 : nrow(gr.f)
gr.f$gender = "female"
gr.f
#female
female.perm <- data.frame()
graph.f = grapher("female/characters", 25, token_filter3("adj", 1940, 2010, token.all))
gr.f <- graph.f[[3]]
gr.f <- gr.f[gr.f$names != "male/characters",]
gr.f <- gr.f[1:21,]
gr.f$rank = 1 : nrow(gr.f)
gr.f$gender = "female"
gr.f
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 50, token_filter3("verb", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:21,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
gr.m
#female
female.perm <- data.frame()
graph.f = grapher("female/characters", 25, token_filter3("verb", 1940, 2010, token.all))
gr.f <- graph.f[[3]]
gr.f <- gr.f[gr.f$names != "male/characters",]
gr.f <- gr.f[1:21,]
gr.f$rank = 1 : nrow(gr.f)
gr.f$gender = "female"
gr.f
#female
female.perm <- data.frame()
graph.f = grapher("female/characters", 25, token_filter3("noun", 1940, 2010, token.all))
gr.f <- graph.f[[3]]
gr.f <- gr.f[gr.f$names != "male/characters",]
gr.f <- gr.f[1:21,]
gr.f$rank = 1 : nrow(gr.f)
gr.f$gender = "female"
gr.f
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 50, token_filter3("noun", 1940, 2010, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:21,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
gr.m
all_ind <- data.frame() #initialise
term <- "best/adj" #term to find PPMI for
pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "MI")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "MI")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, male_ind, female_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik, color = gender)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, aes(fill = gender), alpha = 0.1) + theme_minimal() +
ylab("Pointwise Mutual Information") + ggtitle("Loves/Verb") +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
plot_word <- function(term, pos){
all_ind <- data.frame() #initialise
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "MI")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "MI")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, male_ind, female_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik, color = gender)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, aes(fill = gender), alpha = 0.1) + theme_minimal() +
ylab("Pointwise Mutual Information") + ggtitle("Loves/Verb") +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
}
plot('learns/verb', 'verb')
plot_word('learns/verb', 'verb')
plot_word <- function(term, pos){
all_ind <- data.frame() #initialise
#term <- "best/adj" #term to find PPMI for
#pos <- "adj" #pos of word
for(i in 0 : 7){ #for loop to run across decades
j = 1940 + 10*i
male_ind = grapher("male/characters", 10 ,token_filter(pos, j, token.all), "MI")[[3]][] #get PPMI data for given decade
male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_ind <- male_ind %>% filter(names == term) #filter term given
male_ind$year = j #attach year info
male_ind$gender = "male" #assign gender
#same for females
j = 1940 + 10*i
female_ind = grapher("female/characters", 10 ,token_filter(pos, j, token.all), "MI")[[3]][]
female_ind$rank = 1 : nrow(female_ind)
female_ind <- female_ind %>% filter(names == term)
female_ind$year = j
female_ind$gender = "female"
#bind to overall data
all_ind <- rbind(all_ind, male_ind, female_ind)
}
#plot
ggplot(all_ind, aes(x = year, y = loglik, color = gender)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, aes(fill = gender), alpha = 0.1) + theme_minimal() +
ylab("Pointwise Mutual Information") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
panel.grid.major = element_line(colour = "grey50", size = 0.3), panel.grid.minor = element_line(colour = "grey50", size = 0.3))
}
plot_word('kill/verb', 'verb')
plot_word('married/adj', 'adj')
plot_word('romantic/adj', 'adj')
plot_word('young/adj', 'adj')
plot_word('attractive/adj', 'adj')
plot_word('romantic/adj', 'adj')
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 50, token_filter2("noun", 1940, 2020, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:21,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
#bar plot
ggplot(gr.m[1:25,], aes(reorder(names, -loglik), loglik)) +
geom_bar(stat = "identity", fill = "black", color = "white", alpha = 0.8) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("co-occurring terms")
gr.m
#male
male.perm <- data.frame() #initialize
graph.m = grapher("male/characters", 50, token_filter2("noun", 1940, 2020, token.all)) #extract graph info
gr.m <- graph.m[[3]] #pass graph object
gr.m <- gr.m[gr.m$names != "female/characters",] #filter out female characters
gr.m <- gr.m[1:22,] #filter 20
gr.m$rank = 1 : nrow(gr.m) #rank
gr.m$gender = "male" #assign gender
gr.m
graph.f = grapher("female/characters", 25, token_filter2("noun", 1940, 2020, token.all))
gr.f <- graph.f[[3]]
gr.f <- gr.f[gr.f$names != "male/characters",]
gr.f <- gr.f[1:21,]
gr.f$rank = 1 : nrow(gr.f)
gr.f$gender = "female"
gr.f
plot_word('marry/verb', 'verb')
ggsave("marry_verb.png", width = 6, height = 4)
plot_word('young/adj', 'adj')
ggsave("young_adj.png", width = 6, height = 4)
plot_word('jealoud/adj', 'adj')
plot_word('jealous/adj', 'adj')
ggsave("yjealous_adj.png", width = 6, height = 4)
plot_word('attracted/verb', 'verb')
ggsave("attracted_verb.png", width = 6, height = 4)
plot_word('dating/verb', 'verb')
ggsave("dating_verb.png", width = 6, height = 4)
plot_word('romantic/adj', 'verb')
plot_word('romantic/adj', 'adj')
ggsave("romantic_adj.png", width = 6, height = 4)
plot_word('asks/verb', 'verb')
plot_word('kill/verb', 'verb')
ggsave("kill_verb.png", width = 6, height = 4)
plot_word('hires/verb', 'verb')
plot_word('reveals/verb', 'verb')
ggsave("reveals_verb.png", width = 6, height = 4)
plot_word('led/verb', 'verb')
ggsave("led_verb.png", width = 6, height = 4)
plot_word('calls/verb', 'verb')
plot_word('kill/verb', 'verb')
ggsave("kill_verb.png", width = 6, height = 4)
plot_word('former/adj', 'adj')
ggsave("former_adj.png", width = 6, height = 4)
plot_word('learns/adj', 'adj')
plot_word('learns/adj', 'verb')
plot_word('learns/verb', 'verb')
ggsave("learns_verb.png", width = 6, height = 4)
plot_word('takes/verb', 'verb')
ggsave("takes_verb.png", width = 6, height = 4)
plot_word('arrives/verb', 'verb')
ggsave("arrives_verb.png", width = 6, height = 4)
