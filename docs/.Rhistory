print(communities)
#knitr::kable(communities %>%
#               dplyr::select(community, n_characters, most_important))
#top five in each community
top_ten <- data.frame()
n = 0
for (i in top_comm) {
# create subgraphs for each community
subgraph <- induced_subgraph(graph, v = which(graph$community == i))
# for larger communities
#  if (igraph::gorder(subgraph) > 1055) {
n = n + 1
# get degree
degree <-  igraph::degree(subgraph)
# get top ten degrees
top <- names(head(sort(degree, decreasing = TRUE), nn))
nrows = ifelse(nn > length(top), length(top), nn)
result <- data.frame(community = i, rank = 1:nrows, word = top)
# } else {
#   result <- data.frame(community = NULL, rank = NULL, character = NULL)
#}
top_ten <- top_ten %>%
dplyr::bind_rows(result)
}
print(top_ten)
write.csv(top_ten, paste(gender, '.csv', sep = ''))
print(paste('modularity =', modularity(louvain)))
n
# knitr::kable(
#   top_five %>%
#     tidyr::pivot_wider(names_from = rank, values_from = character)
# )
#Visualising the communities
subgraph <- induced_subgraph(graph, v = top_ten$word)
subgraph <- simplify(subgraph)
subgraph$community
nodes = data.frame(word = names(V(subgraph)))
group = rep(1:n, each = nn)
top_ten$group = group
clusters = inner_join(nodes, top_ten)
subgraph$community <- clusters$group
#unique(subgraph$community)
#color by community
clust_obj = make_clusters(subgraph, membership = clusters$group)
prettyColors <- c("darkorange3", "deepskyblue4", "darkolivegreen","darkorchid3", "firebrick3")
communityColors <- prettyColors[membership(clust_obj)]
# give our nodes some properties, incl scaling them by degree and coloring them by community
V(subgraph)$size <- 1
V(subgraph)$frame.color <- "white"
#V(subgraph)$color <- subgraph$community
V(subgraph)$color <- 'SkyBlue2'
#V(male_subgraph)$label <- V(male_subgraph)$name
V(subgraph)$label.cex <- 0.05
V(subgraph)$label.color <- communityColors
# also color edges according to their starting node
#edge.start <- ends(subgraph, es = E(subgraph), names = F)[,1]
#E(subgraph)$color <- V(subgraph)$color[edge.start]
#E(subgraph)$arrow.mode <- 0
# only label central characters
#v_labels <- which(V(friends_graph)$name %in% friends)
#for (i in 1:length(V(friends_graph))) {
#  if (!(i %in% v_labels)) {
#    V(friends_graph)$label[i] <- ""
#  }
#}
#l2 <- layout_with_mds(male_subgraph)
#layout <- layout_with_kk(male_subgraph, weights=weights)
#plot(graph, layout=layout)
#plot(male_subgraph, rescale = T, layout = l2, main = "Male Graph")
#length(V(male_subgraph))
#visIgraph(male_subgraph) %>% visIgraphLayout(layout = "layout_with_mds") %>% visNodes(size = 12)
#layout_in_circle
#"layout_with_mds"
#plot by groups
#make clusters first
clust_obj = make_clusters(subgraph, membership = clusters$group)
# weights <- ifelse(crossing(male_clust, male_subgraph), 1, 100)
# layout <- layout_with_kk(male_subgraph, weights=weights)
# plot(male_subgraph, layout=layout)
#colror by community
#prettyColors <- c("turquoise4", "azure4", "olivedrab","deeppink4", "blue")
#communityColors <- prettyColors[membership(clust_obj)]
edge.weights <- function(community, network, weight.within = 100, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
E(subgraph)$weight <- edge.weights(clust_obj, subgraph)
layout <- layout_with_fr(subgraph, weights=E(subgraph)$weight)
#plot(subgraph, layout=layout, col = communityColors)
plot(subgraph, layout=layout, edge.color = adjustcolor('SkyBlue2', alpha.f = 0.2))
#visIgraph(subgraph) %>% visIgraphLayout(layout = "layout_with_mds") %>% visNodes(size = 14)
return(subgraph)
}
subgraph = detect_communities(token.all, 'female', 20, 20)
subgraph = detect_communities(token.all, 'male', 20, 20)
token.all <- token_filter2('all', 1940, 1950, token.all)
subgraph = detect_communities(token.all, 'male', 20, 20)
subgraph = detect_communities(token.all, 'female', 20, 20)
#load tokens, get it ready for analysis
load("token.all.RData")
#convert tokens to all lower
token.all <- tokens_tolower(token.all) #convert all tokens to lower
token.all = token.all %>% tokens_remove(c('ex/adj', 'ex/noun'))
#sample based on min in a decade
set.seed(42)
token.all = tokens_sample(token.all, size = 22638, replace = FALSE, prob = NULL, by = decade)
token.all <- token_filter2('all', 2010, 2020, token.all)
subgraph = detect_communities(token.all, 'female', 20, 20)
subgraph = detect_communities(token.all, 'male', 20, 20)
#load tokens, get it ready for analysis
load("token.all.RData")
#convert tokens to all lower
token.all <- tokens_tolower(token.all) #convert all tokens to lower
token.all = token.all %>% tokens_remove(c('ex/adj', 'ex/noun'))
#sample based on min in a decade
set.seed(42)
token.all = tokens_sample(token.all, size = 22638, replace = FALSE, prob = NULL, by = decade)
subgraph = detect_communities(token.all, 'male', 20, 20)
subgraph = detect_communities(token.all, 'female', 20, 20)
#write a loop for saving multiple plots
male_plot <- c('leader/noun', 'boss/noun', 'murder/noun')
male_plot
for(i in male_plot){
print(i)
}
#write a loop for saving multiple plots
male_plot <- c('agent/noun', 'boss/noun', 'murder/noun', 'leader/noun', 'office/noun',
'attorney/noun', 'fight/noun', 'owner/noun', 'assistant/noun')
plot_word_single('agent/noun', 'male')
plot_word_single <- function(term, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll'
male_ind = male_temp
male = rbind(male, male_ind)
}
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
label1
label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(paste(gender, term1, term2, sep = '-')) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) +
annotate('text', label = label1, x = 1950, y = 190, parse = TRUE) +
annotate('text', label = label2, x = 1950, y = 175, parse = TRUE)
}
plot_word_single('agent/noun', 'male')
plot_word_single <- function(term, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll'
male_ind = male_temp
male = rbind(male, male_ind)
}
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
label1
label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(term)) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) +
annotate('text', label = label1, x = 1950, y = 190, parse = TRUE) +
annotate('text', label = label2, x = 1950, y = 175, parse = TRUE)
}
#write a loop for saving multiple plots
male_plot <- c('agent/noun', 'boss/noun', 'murder/noun', 'leader/noun', 'office/noun',
'attorney/noun', 'fight/noun', 'owner/noun', 'assistant/noun')
plot_word_single('agent/noun', 'male')
plot_word_single <- function(term, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll'
male_ind = male_temp
male = rbind(male, male_ind)
}
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
label1
label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(term)) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) +
annotate('text', label = label1, x = 1950, y = 190, parse = TRUE) +
annotate('text', label = label2, x = 1950, y = 175, parse = TRUE)
}
plot_word_single('agent/noun', 'male')
plot_word_single <- function(term, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll'
male_ind = male_temp
male = rbind(male, male_ind)
}
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
label1
label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) +
annotate('text', label = label1, x = 1950, y = 190, parse = TRUE) +
annotate('text', label = label2, x = 1950, y = 175, parse = TRUE)
}
plot_word_single('agent/noun', 'male')
plot_word_single <- function(term, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll'
male_ind = male_temp
male = rbind(male, male_ind)
}
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
label1
label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) +
annotate('text', label = label1, x = 1950, y = 75, parse = TRUE) +
annotate('text', label = label2, x = 1950, y = 65, parse = TRUE)
}
#write a loop for saving multiple plots
male_plot <- c('agent/noun', 'boss/noun', 'murder/noun', 'leader/noun', 'office/noun',
'attorney/noun', 'fight/noun', 'owner/noun', 'assistant/noun')
plot_word_single('agent/noun', 'male')
plot_word_single <- function(term, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll'
male_ind = male_temp
male = rbind(male, male_ind)
}
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
label1
label2
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) #+
#annotate('text', label = label1, x = 1950, y = 75, parse = TRUE) +
#annotate('text', label = label2, x = 1950, y = 65, parse = TRUE)
}
#write a loop for saving multiple plots
male_plot <- c('agent/noun', 'boss/noun', 'murder/noun', 'leader/noun', 'office/noun',
'attorney/noun', 'fight/noun', 'owner/noun', 'assistant/noun')
plot_word_single('agent/noun', 'male')
ggsave('agent/noun', width = 6, height = 4)
ggsave('agent/noun.png', width = 6, height = 4)
ggsave('agent_noun.png', width = 6, height = 4)
male_plot[1]
male_plot[1][1:3]
male_plot[1][1]
male_plot[1][:3,
male_plot[1][:3,]
male_plot[1]
plot_word_single('boss/noun', 'male')
ggsave('boss_noun.png', width = 6, height = 4)
plot_word_single('murder/noun', 'male')
ggsave('murder_noun.png', width = 6, height = 4)
plot_word_single('leader/noun', 'male')
ggsave('leader_noun.png', width = 6, height = 4)
ggsave('office_noun.png', width = 6, height = 4)
plot_word_single('office/noun', 'male')
ggsave('office_noun.png', width = 6, height = 4)
plot_word_single('leader/noun', 'male')
ggsave('leader_noun.png', width = 6, height = 4)
plot_word_single('attorney/noun', 'male')
ggsave('attorney_noun.png', width = 6, height = 4)
plot_word_single('fight/noun', 'male')
ggsave('fight_noun.png', width = 6, height = 4)
plot_word_single('owner/noun', 'male')
ggsave('owner_noun.png', width = 6, height = 4)
plot_word_single('assistant/noun', 'male')
ggsave('assistant_noun.png', width = 6, height = 4)
exam = 'agent/noun'
str_split(exam, '/')
str_split(exam, '/')[1]
str_split(exam, '/')[[1]
str_split(exam, '/')[[1]]
str_split(exam, '/')[[1]]
str_split(exam, '/')[[1]][1]
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
#write a loop for saving multiple plots
male_plot <- c('agent/noun', 'boss/noun', 'murder/noun', 'leader/noun', 'office/noun',
'attorney/noun', 'fight/noun', 'owner/noun', 'assistant/noun')
for(i in male_plot){
plot_word_single(i, 'male')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
female_noun <- c('love/noun', 'girlfriend/noun', 'wife/noun', 'relationship/noun', 'affair/noun',
'marriage/noun', 'wedding/noun', 'date/noun')
for(i in female_noun){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
male_verb <- c('kill/verb', 'led/verb', 'confronts/verb')
female_verb <- c('merry/verb', 'dating/verb', 'attracted/verb', 'loves/verb')
for(i in female_verb){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
female_verb <- c('marry/verb', 'dating/verb', 'attracted/verb', 'loves/verb')
for(i in female_verb){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
male_verb <- c('kill/verb', 'led/verb', 'confronts/verb')
for(i in male_verb){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
male_adj <- c('wealthy/adj', 'best/adj', 'corrupt/adj', 'suspicious/adj', 'criminal/adj')
female_adj <- c('pregnant/adj', 'married/adj', 'beautiful/adj', 'romantic/adj', 'attractive/adj')
for(i in male_verb){
plot_word_single(i, 'male')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
for(i in male_adj){
plot_word_single(i, 'male')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
for(i in female_adj){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
for(i in female_adj){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
plot_word_single <- function(term, gender){
male = data.frame()
for(i in 0 : 7){ #for loop to run across decades
male_temp <- data.frame()
j = 1940 + 10*i
male_temp = grapher(paste(gender,'/characters', sep=''), 10 , token_filter('all', j, token.all), "LOGLIK")[[3]][] #get PPMI data for given decade
#male_ind$rank = 1 : nrow(male_ind) #rank words - redundant
male_temp <- male_temp %>% filter(names == term) #filter term given
male_temp$year = j #attach year info
male_temp$gender = "male" #assign gender
names(male_temp)[2] = 'll'
male_ind = male_temp
male = rbind(male, male_ind)
}
male = male %>% select(year, ll)
#check significance
ancova.word <- lm(ll~year, data = male)
R2 = round(summary(ancova.word)[[8]], 2)
p = round(anova(ancova.word)[[5]][1], 2)
label1 = paste('R^2 == ', R2, sep = '')
label2 = paste('p == ', p, sep = '')
print(term)
print(label1)
print(label2)
#plot
ggplot(male, aes(x = year, y = ll)) +
geom_point(color = "black") +
geom_line(size = 1) +
geom_smooth(method = "lm", se = TRUE, size = 1, alpha = 0.1) + theme_minimal() +
ylab("Loglikelihood Ratio") + ggtitle(term) +
theme(axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12), legend.title = element_text(color = "black", size = 14),
) #+
#annotate('text', label = label1, x = 1950, y = 75, parse = TRUE) +
#annotate('text', label = label2, x = 1950, y = 65, parse = TRUE)
}
for(i in female_adj){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
subgraph = detect_communities(token.all, 'female', 20, 20)
subgraph = detect_communities(token.all, 'male', 20, 20)
#write a loop for saving multiple plots
male_noun <- c('agent/noun', 'boss/noun', 'murder/noun', 'leader/noun', 'office/noun',
'attorney/noun', 'fight/noun', 'owner/noun', 'assistant/noun')
for(i in male_noun){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
for(i in male_noun){
plot_word_single(i, 'male')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
for(i in female_noun){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
for(i in male_verb){
plot_word_single(i, 'male')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
for(i in female_verb){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
for(i in male_adj){
plot_word_single(i, 'male')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
for(i in female_adj){
plot_word_single(i, 'female')
ggsave(paste(str_split(i, '/')[[1]][1], '.png', sep=''), width = 6, height = 4)
}
setwd("~/Documents/GitHub/film_networks/docs")
